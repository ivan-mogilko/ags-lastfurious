// main global script file

// called when the game starts, before the first room is loaded
function game_start() 
{
  Mouse.Mode = eModePointer;
  Mouse.Visible = false;
  
  DynamicSprite *font = DynamicSprite.CreateFromExistingSprite(13);
  AzureItalicFont.CreateFromSprite(font, 13, 13, 0, 126, null, null);
  font.Delete();
  
  font = DynamicSprite.CreateFromExistingSprite(22);
  PurpleItalicFont.CreateFromSprite(font, 13, 13, 0, 126, null, null);
  font.Delete();
  
  font = DynamicSprite.CreateFromExistingSprite(14);
  int last = 126;
  int total = last + 1;
  int offs[] = new int[total];
  int widths[] = new int[total];
  int i;
  for (i = 0; i < total; i++) {
    offs[i] = 0;
  }
  for (i = 0; i < total; i++) {
    widths[i] = 28;
  }
  // !, '(aposthrophe), .(dot), ,(comma), I, i, j, l, :, ; and |
  //offs['1'] = 4;
  offs['t'] = 3;
  offs['!'] = 9;
  offs['`'] = 9;
  offs['.'] = 9;
  offs[','] = 9;
  offs['I'] = 9;
  offs['i'] = 9;
  offs['j'] = 0;
  offs['l'] = 9;
  offs[':'] = 9;
  offs[';'] = 9;
  offs['|'] = 9;
  //widths['1'] -= (4 + 9) - 4;
  widths['t'] -= (3 + 7) - 4;
  widths['!'] -= 18 - 4;
  widths['`'] -= 18 - 4;
  widths['.'] -= 18 - 4;
  widths[','] -= 18 - 4;
  widths['I'] -= 18 - 4;
  widths['i'] -= 18 - 4;
  widths['j'] -= 9 - 4;
  widths['l'] -= 18 - 4;
  widths[':'] -= 18 - 4;
  widths[';'] -= 18 - 4;
  widths['|'] -= 18 - 4;
  SilverFont.CreateFromSprite(font, 32, 34, 0, last, offs, widths);
  font.Delete();
  
  SetDefaultOptions();
  LoadOptions();
}

// put anything you want to happen every game cycle in here
function repeatedly_execute() 
{
}

// put here anything you want to happen every game cycle, even when the game is blocked
function repeatedly_execute_always() 
{
}

// called when a key is pressed. keycode holds the key's ASCII code
function on_key_press(eKeyCode keycode) 
{
  if (IsDebugMode) {
    if (keycode == eKeyQ) {
      DisplayDebugInfo = !DisplayDebugInfo;
      gDebugInfo.Visible = !gDebugInfo.Visible;
    }
    if (keycode == eKeyW) {
      DisplayDebugOverlay = !DisplayDebugOverlay;
      gDebugOver.Visible = !gDebugOver.Visible;
    }
    if (keycode == eKeyE) {
      DisplayDebugAI = !DisplayDebugAI;
      DisplayDebugRace = !DisplayDebugAI;
      gDebugAI.Visible = DisplayDebugAI;
    }
    if (keycode == eKeyR) {
      DisplayDebugRace = !DisplayDebugRace;
      DisplayDebugAI = !DisplayDebugRace;
      gDebugAI.Visible = DisplayDebugRace;
    }
    if (keycode == eKeyA){
      if (RaceBuilderEnabled)
        EnableRaceBuilder(false);
      EnableAIBuilder(!AIBuilderEnabled);
    }
    else if (keycode == eKeyZ) {
      if (AIBuilderEnabled)
        EnableAIBuilder(false);
      EnableRaceBuilder(!RaceBuilderEnabled);
    }
    if (keycode == eKeyCtrlS) {
      if (AIBuilderEnabled)
        SaveAIPaths();
      else if (RaceBuilderEnabled)
        SaveRaceCheckpoints();
    }
    if (keycode == eKeyCtrlL) {
      LoadRaceCheckpoints();
      LoadAIPaths();
    }
  }
  
  if (keycode == eKeyF12) SaveScreenShot("$SAVEGAMEDIR$/screenshot.bmp");  // F12
  if (keycode == eKeyCtrlV) Debug(1,0); // Ctrl-V, version
  if (keycode == eKeyCtrlA) Debug(2,0); // Ctrl-A, show walkable areas
  if (keycode == eKeyCtrlX) Debug(3,0); // Ctrl-X, teleport to room
}

function on_mouse_click(MouseButton button) // called when a mouse button is clicked. button is either LEFT or RIGHT
{
}


function dialog_request(int param) {
}

void ReadRaceConfig()
{
  String cfg_file;
  if (ThisRace.AiAndPhysics == ePhysicsWild)
    cfg_file = "race_wild.ini";
  else
    cfg_file = "race_safe.ini";
  
  IniFile ini;
  if (!ini.Load(String.Format("$APPDATADIR$/Data/%s", cfg_file))) {
    if (!ini.Load(String.Format("$INSTALLDIR$/Data/%s", cfg_file)))
      return; // no config
  }

  Track.Gravity = ini.ReadFloat("track", "gravity", Track.Gravity);
  Track.AirResistance = ini.ReadFloat("track", "air_resistance", Track.AirResistance);
  
  int i;
  for (i = 0; i < MAX_WALKABLE_AREAS; i++)
  {
    String section = String.Format("area%d", i);
    if (!ini.SectionExists(section))
      continue;
    Track.IsObstacle[i] = ini.ReadBool(section, "is_obstacle", Track.IsObstacle[i]);
    Track.TerraSlideFriction[i] = ini.ReadFloat(section, "slide_friction", Track.TerraSlideFriction[i]);
    Track.TerraRollFriction[i] = ini.ReadFloat(section, "roll_friction", Track.TerraRollFriction[i]);
    Track.TerraGrip[i] = ini.ReadFloat(section, "grip", Track.TerraGrip[i]);
    Track.EnvResistance[i] = ini.ReadFloat(section, "env_resistance", Track.EnvResistance[i]);
  }
 
#define veh Cars[i]
  for (i = 0; i < MAX_RACING_CARS; i++) {
    veh.bodyLength = ini.ReadFloat("car", "bodyLength", veh.bodyLength);
    veh.bodyWidth = ini.ReadFloat("car", "bodyLength", veh.bodyWidth);
    veh.distanceBetweenAxles = ini.ReadFloat("car", "distanceBetweenAxles", veh.distanceBetweenAxles);
    veh.bodyMass = ini.ReadFloat("car", "bodyMass", veh.bodyMass);
    veh.bodyAerodynamics = ini.ReadFloat("car", "bodyAerodynamics", veh.bodyAerodynamics);
    veh.hardImpactLossFactor = ini.ReadFloat("car", "hardImpactLossFactor", veh.hardImpactLossFactor);
    veh.softImpactLossFactor = ini.ReadFloat("car", "softImpactLossFactor", veh.softImpactLossFactor);
    veh.engineMaxPower = ini.ReadFloat("car", "engineMaxPower", veh.engineMaxPower);
    veh.stillTurningVelocity = ini.ReadFloat("car", "stillTurningVelocity", veh.stillTurningVelocity);
    veh.driftVelocityFactor = ini.ReadFloat("car", "driftVelocityFactor", veh.driftVelocityFactor);
  }
#undef veh
  
  UISteeringAngle = Maths.DegreesToRadians(ini.ReadFloat("car_control", "steeringAngle", Maths.RadiansToDegrees(UISteeringAngle)));
  
  DisplayDebugOverlay = ini.ReadBool("debug", "displayDebugOverlay", DisplayDebugOverlay);
  DisplayDebugInfo = ini.ReadBool("debug", "displayDebugInfo", DisplayDebugInfo);
  
  gDebugOver.Visible = DisplayDebugOverlay;
  gDebugInfo.Visible = DisplayDebugInfo;
}
