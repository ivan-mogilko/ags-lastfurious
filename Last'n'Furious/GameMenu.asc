
#define OPTION_HEIGHT 28

#define DIAMOND_X 219
#define STARTMENU_OPTION_POS_TOP 303
#define STARTMENU_OPTION_X 255
#define STARTMENU_OPTION_SPACING 32

#define OPTION_POS_TOP 50
#define OPTION_X 97
#define OPTION_SPACING 50
#define OPTION_VALUE_X 371
#define SELECTOR_Y_OFF (-10)



MenuClass MenuType;
MenuClass PrevMenuType;
int MMOptionCount;
int MMSelection;
DynamicSprite *SprOptions;

int MusicVol;
int EffectsVol;
SpriteFont SilverFont;
SpriteFont AzureItalicFont;
SpriteFont PurpleItalicFont;

bool IsDebugMode;

export IsDebugMode, MusicVol, EffectsVol, SilverFont, AzureItalicFont, PurpleItalicFont;

void SetMusic(int vol)
{
  vol = Maths.Clamp(vol, 0, 100);
  MusicVol = vol;
  Game.SetAudioTypeVolume(eAudioTypeMusic, vol, eVolExistingAndFuture);
}

void SetEffects(int vol)
{
  vol = Maths.Clamp(vol, 0, 100);
  EffectsVol = vol;
  Game.SetAudioTypeVolume(eAudioTypeSound,  vol, eVolExistingAndFuture);
}

void SetDefaultOptions()
{
  #ifdef DEBUG
    IsDebugMode = true;
  #endif
  #ifndef DEBUG
    IsDebugMode = false;
  #endif
  
  SetMusic(100);
  SetEffects(100);

  ThisRace.PlayerDriver = 0;
  ThisRace.Laps = 3;
  ThisRace.Opponents = 3;
  ThisRace.AiAndPhysics = ePhysicsSafe;
  ThisRace.CarCollisions = true;
}

String GetAiAndPhysicsString(AiAndPhysicsOption option)
{
  switch (option)
  {
    case ePhysicsSafe: return "safe";
    case ePhysicsWild: return "wild";
  }
  return "";
}

AiAndPhysicsOption GetAiAndPhysicsOption(String option)
{
  if (option.CompareTo("safe", false) == 0)
    return ePhysicsSafe;
  if (option.CompareTo("wild", false) == 0)
    return ePhysicsWild;
  return ePhysicsSafe;
}

void LoadOptions()
{
  IniFile ini;
  if (!ini.Load("$SAVEGAMEDIR$/options.ini"))
    return;

  IsDebugMode = ini.ReadBool("main", "debug_mode", IsDebugMode);
  
  SetMusic(ini.ReadInt("main", "music", MusicVol));
  SetEffects(ini.ReadInt("main", "sound", EffectsVol));
  
  ThisRace.PlayerDriver = ini.ReadInt("race", "driver", ThisRace.PlayerDriver);
  ThisRace.Laps = ini.ReadInt("race", "laps", ThisRace.Laps);
  String value = GetAiAndPhysicsString(ThisRace.AiAndPhysics);
  value = ini.Read("race", "physics", value);
  ThisRace.AiAndPhysics = GetAiAndPhysicsOption(value);
  ThisRace.Opponents = ini.ReadInt("race", "opponents", ThisRace.Opponents);
  ThisRace.CarCollisions = ini.ReadBool("race", "car_collisions", ThisRace.CarCollisions);
}

void SaveOptions()
{
  IniFile ini;
  
  ini.WriteBool("main", "debug_mode", IsDebugMode);
  
  ini.WriteInt("main", "music", MusicVol);
  ini.WriteInt("main", "sound", EffectsVol);
  
  ini.WriteInt("race", "driver", ThisRace.PlayerDriver);
  ini.WriteInt("race", "laps", ThisRace.Laps);
  ini.WriteInt("race", "opponents", ThisRace.Opponents);
  ini.Write("race", "physics", GetAiAndPhysicsString(ThisRace.AiAndPhysics));
  ini.WriteBool("race", "car_collisions", ThisRace.CarCollisions);
  
  ini.Save("$SAVEGAMEDIR$/options.ini");
}

void UpdateSelection()
{
  if (MenuType == eMenuStart) {
    btnMMSelector.X = DIAMOND_X;
    btnMMSelector.Y = STARTMENU_OPTION_POS_TOP + MMSelection * STARTMENU_OPTION_SPACING + OPTION_HEIGHT / 2 - Game.SpriteHeight[btnMMSelector.Graphic] / 2;
  } else if (MenuType != eMenuCredits) {
    btnMMSelector.X = 0;
    btnMMSelector.Y = OPTION_POS_TOP + MMSelection * OPTION_SPACING + SELECTOR_Y_OFF;
  }
}

void UpdateOptionValues()
{
  if (MenuType == eMenuStart)
    return;

  DrawingSurface *ds = SprOptions.GetDrawingSurface();
  ds.DrawingColor = COLOR_TRANSPARENT;
  ds.DrawRectangle(OPTION_VALUE_X, 0, SprOptions.Width - 1, SprOptions.Height - 1);
  
  String value;
  int portrait_sprite = 100 + ThisRace.PlayerDriver;
  int portrait_x = OPTION_VALUE_X + SilverFont.GlyphWidth * 5 / 2 - 10 - Game.SpriteWidth[2] - 5;
  int portrait_y = OPTION_POS_TOP + OPTION_SPACING + OPTION_HEIGHT / 2 - Game.SpriteHeight[2] / 2;
  int car_sprite = 7 + ThisRace.PlayerDriver;
  int car_x = OPTION_VALUE_X + SilverFont.GlyphWidth * 5 / 2 - 10 + 5;
  int car_y = portrait_y;
  int car_xoff = (Game.SpriteWidth[2] - Game.SpriteWidth[car_sprite]) / 2;
  int car_yoff = (Game.SpriteHeight[2] - Game.SpriteHeight[car_sprite]) / 2;
  
  switch (MenuType) {
    case eMenuMain:
    case eMenuMainInGame:
      if (MusicVol == 0)
        value = " OFF >";
      else if (MusicVol == 100)
        value = "< FULL";
      else
        value = String.Format("< %02d >", MusicVol);
      SilverFont.DrawText(value, ds, OPTION_VALUE_X, OPTION_POS_TOP + OPTION_SPACING * 2);
      break;
    case eMenuSetupRace:
      SilverFont.DrawText("<   >", ds, OPTION_VALUE_X, OPTION_POS_TOP + OPTION_SPACING);
      ds.DrawImage(portrait_x, portrait_y, 2);
      ds.DrawImage(portrait_x + 2, portrait_y + 2, portrait_sprite);
      value = String.Format("< %d >", ThisRace.Laps);
      SilverFont.DrawText(value, ds, OPTION_VALUE_X, OPTION_POS_TOP + OPTION_SPACING * 2);
      value = String.Format("< %d >", ThisRace.Opponents);
      SilverFont.DrawText(value, ds, OPTION_VALUE_X, OPTION_POS_TOP + OPTION_SPACING * 3);
      if (ThisRace.AiAndPhysics == ePhysicsWild)
        value = "Wild";
      else
        value = "Safe";
      SilverFont.DrawText(value, ds, OPTION_VALUE_X, OPTION_POS_TOP + OPTION_SPACING * 4);
      if (ThisRace.CarCollisions)
        value = "ON";
      else
        value = "OFF";
      SilverFont.DrawText(value, ds, OPTION_VALUE_X, OPTION_POS_TOP + OPTION_SPACING * 5);
      ds.DrawImage(car_x, car_y, 2);
      ds.DrawImage(car_x + car_xoff, car_y + car_yoff, car_sprite);
      break;
  }
  ds.Release();
  btnMenuOptions.NormalGraphic = SprOptions.Graphic; // poke button to force AGS redraw it
}

void ArrangeMenu()
{
  if (SprOptions == null)
    SprOptions = DynamicSprite.Create(gGameMenu.Width, gGameMenu.Height);

  DrawingSurface *ds = SprOptions.GetDrawingSurface();
  ds.Clear();
  int y;
  switch (MenuType) {
    case eMenuStart:
      SilverFont.DrawText("Start", ds, STARTMENU_OPTION_X, STARTMENU_OPTION_POS_TOP);
      SilverFont.DrawText("Credits", ds, STARTMENU_OPTION_X, STARTMENU_OPTION_POS_TOP + STARTMENU_OPTION_SPACING);
      SilverFont.DrawText("Quit", ds, STARTMENU_OPTION_X, STARTMENU_OPTION_POS_TOP + STARTMENU_OPTION_SPACING * 2);
      MMOptionCount = 3;
      break;
    case eMenuMain:
      SilverFont.DrawText("Race", ds, OPTION_X, OPTION_POS_TOP);
      SilverFont.DrawText("Watch Demo", ds, OPTION_X, OPTION_POS_TOP + OPTION_SPACING);
      SilverFont.DrawText("Music", ds, OPTION_X, OPTION_POS_TOP + OPTION_SPACING * 2);
      SilverFont.DrawText("Quit", ds, OPTION_X, OPTION_POS_TOP + OPTION_SPACING * 3);
      MMOptionCount = 4;
      break;
    case eMenuMainInGame:      
      SilverFont.DrawText("Continue", ds, OPTION_X, OPTION_POS_TOP);
      SilverFont.DrawText("Restart", ds, OPTION_X, OPTION_POS_TOP + OPTION_SPACING);
      SilverFont.DrawText("Music", ds, OPTION_X, OPTION_POS_TOP + OPTION_SPACING * 2);
      SilverFont.DrawText("Quit", ds, OPTION_X, OPTION_POS_TOP + OPTION_SPACING * 3);
      MMOptionCount = 4;
      break;
    case eMenuSetupRace:
      SilverFont.DrawText("Go!", ds, OPTION_X, OPTION_POS_TOP);
      SilverFont.DrawText("Driver", ds, OPTION_X, OPTION_POS_TOP + OPTION_SPACING);
      SilverFont.DrawText("Laps", ds, OPTION_X, OPTION_POS_TOP + OPTION_SPACING * 2);
      SilverFont.DrawText("Opponents", ds, OPTION_X, OPTION_POS_TOP + OPTION_SPACING * 3);
      SilverFont.DrawText("Physics", ds, OPTION_X, OPTION_POS_TOP + OPTION_SPACING * 4);
      SilverFont.DrawText("Collisions", ds, OPTION_X, OPTION_POS_TOP + OPTION_SPACING * 5);
      SilverFont.DrawText("Back", ds, OPTION_X, OPTION_POS_TOP + OPTION_SPACING * 6);
      MMOptionCount = 7;
      break;
    case eMenuCredits:
      ds.DrawingColor = Game.GetColorFromRGB(11, 15, 54);
      ds.DrawRectangle(0, 0, 640, 400);
      y = 40;
      PurpleItalicFont.DrawTextCentered("CODE", ds, 0, y, ds.Width); y += PurpleItalicFont.Height + 10;
      AzureItalicFont.DrawTextCentered("Crimson Wizard", ds, 0, y, ds.Width); y += 40;
      PurpleItalicFont.DrawTextCentered("ART & TECH IDEAS", ds, 0, y, ds.Width); y += PurpleItalicFont.Height + 10;
      AzureItalicFont.DrawTextCentered("Jim Reed", ds, 0, y, ds.Width); y += 40;
      PurpleItalicFont.DrawTextCentered("MUSIC", ds, 0, y, ds.Width); y += PurpleItalicFont.Height + 10;
      AzureItalicFont.DrawTextCentered("\"Car Theft 101\" by Eric Matyas", ds, 0, y, ds.Width); y += AzureItalicFont.Height;
      AzureItalicFont.DrawTextCentered("www.soundimage.org", ds, 0, y, ds.Width); y += AzureItalicFont.Height + 10;
      AzureItalicFont.DrawTextCentered("\"Welcome to the Show\" by Kevin MacLeod", ds, 0, y, ds.Width); y += AzureItalicFont.Height;
      AzureItalicFont.DrawTextCentered("incompetech.com", ds, 0, y, ds.Width); y += AzureItalicFont.Height + 10;
      PurpleItalicFont.DrawTextCentered("Press any key to continue", ds, 0, STARTMENU_OPTION_POS_TOP + STARTMENU_OPTION_SPACING * 2, ds.Width);
      break;
  }
  ds.Release();
  
  if (MenuType != eMenuCredits)
    UpdateOptionValues();
  
  btnMenuOptions.NormalGraphic = SprOptions.Graphic;
  btnMenuOptions.Visible = true;
  if (MenuType == eMenuStart) {
    btnMMSelector.NormalGraphic = 1;
    btnMMSelector.Visible = true;
    btnMMVrStrip.Visible = false;
    gUnderlay.Visible = false;
  } else if (MenuType == eMenuCredits) {
    btnMMSelector.Visible = false;
    btnMMVrStrip.Visible = false;
    gUnderlay.Visible = false;
  } else {
    btnMMSelector.NormalGraphic = 4;
    btnMMSelector.Visible = true;
    btnMMVrStrip.Visible = true;
    gUnderlay.Visible = true;
  }
}

void DisplayGameMenu(MenuClass menu, bool pausedInGame)
{
  MenuType = menu;
  if (pausedInGame && !IsGamePaused()) {
    PauseGame();
    gRaceOverlay.Visible = false;
    gBanner.Visible = false;
  } else {
  }
  
  AllButtonsState(gGameMenu, false, false);
  ArrangeMenu();
  MMSelection = 0;
  UpdateSelection();
  gGameMenu.Visible = true;
}

void HideGameMenu()
{
  if (!gGameMenu.Visible)
    return;
  SaveOptions();
  AllButtonsState(gGameMenu, false, false);
  gGameMenu.Visible = false;
  btnMenuOptions.NormalGraphic = 0;
  SprOptions.Delete();
  SprOptions = null;
  gUnderlay.Visible = false;
  MenuType = eMenuNone;
  if (IsGamePaused()) {
    gRaceOverlay.Visible = true;
    gBanner.Visible = true;
    UnPauseGame();
  }
}

void OnToMainMenu()
{
  HideGameMenu();
  Wait(1);
  player.ChangeRoom(305);
}

void OnQuit()
{
  SaveOptions();
  QuitGame(0);
}

void SwitchToMenu(MenuClass menu)
{
  PrevMenuType = MenuType;
  DisplayGameMenu(menu, IsGamePaused());
}

void OnWatchDemo()
{
  HideGameMenu();
}

void OnDriverChange(bool prev)
{
  if (prev) {
    if (ThisRace.PlayerDriver > 0)
      ThisRace.PlayerDriver--;
  } else {
    if (ThisRace.PlayerDriver < 5)
      ThisRace.PlayerDriver++;
  }
  UpdateOptionValues();
}

void OnLapsChange(bool prev)
{
  if (prev) {
    if (ThisRace.Laps > 1)
      ThisRace.Laps--;
  } else {
    if (ThisRace.Laps < 9)
      ThisRace.Laps++;
  }
  UpdateOptionValues();
}

void OnOpponents(bool prev)
{
  if (prev) {
    if (ThisRace.Opponents > 0)
      ThisRace.Opponents--;
  } else {
    if (ThisRace.Opponents < MAX_RACING_CARS - 1)
      ThisRace.Opponents++;
  }
  UpdateOptionValues();
}

void OnPhysicsType()
{
  if (ThisRace.AiAndPhysics == ePhysicsSafe)
    ThisRace.AiAndPhysics = ePhysicsWild;
  else
    ThisRace.AiAndPhysics = ePhysicsSafe;
  UpdateOptionValues();
}

void OnCollisions()
{
  ThisRace.CarCollisions = !ThisRace.CarCollisions;
  UpdateOptionValues();
}


void OnMusic(bool down)
{
  if (down)
    SetMusic(MusicVol - 5);
  else
    SetMusic(MusicVol + 5);
  if (gGameMenu.Visible)
    UpdateOptionValues();
}

void OnEffects(bool down)
{
  if (down)
    SetEffects(EffectsVol - 5);
  else
    SetEffects(EffectsVol + 5);
  if (gGameMenu.Visible)
    UpdateOptionValues();
}

void OnGo()
{
  HideGameMenu();
  CallRoomScript(eRoom305_StartSinglePlayer);
}

void ConfirmSelection()
{
  if (MenuType == eMenuStart) {
    switch (MMSelection) {
      case 0: OnToMainMenu(); break;
      case 1: SwitchToMenu(eMenuCredits); break;
      case 2: OnQuit(); break;
    }
  } else if (MenuType == eMenuMain) {
    switch (MMSelection) {
      case 0: SwitchToMenu(eMenuSetupRace); break;
      case 1: OnWatchDemo(); break;
      case 2: OnMusic(false); break;
      case 3: OnQuit(); break;
    }
  } else if (MenuType == eMenuSetupRace) {
    switch (MMSelection) {
      case 0: OnGo(); break;
      case 1: OnDriverChange(false); break;
      case 2: OnLapsChange(false); break;
      case 3: OnOpponents(false); break;
      case 4: OnPhysicsType(); break;
      case 5: OnCollisions(); break;
      case 6: SwitchToMenu(PrevMenuType); break;
    }
  } else if (MenuType == eMenuMainInGame) {
    switch (MMSelection) {
      case 0: HideGameMenu(); break;
      case 1: SwitchToMenu(eMenuSetupRace); break;
      case 2: OnMusic(false); break;
      case 3: OnQuit(); break;
    }
  } else if (MenuType == eMenuCredits) {
    SwitchToMenu(eMenuStart);
  }
}

void ChangeOption(bool left)
{
  if (MenuType == eMenuMain || MenuType == eMenuMainInGame) {
    switch (MMSelection) {
      case 2: OnMusic(left); break;
    }
  } else if (MenuType == eMenuSetupRace) {
    switch (MMSelection) {
      case 1: OnDriverChange(left); break;
      case 2: OnLapsChange(left); break;
      case 3: OnOpponents(left); break;
      case 4: OnPhysicsType(); break;
      case 5: OnCollisions(); break;
    }
  }
}

void CancelMenu()
{
  if (MenuType == eMenuMain || MenuType == eMenuMainInGame) {
    HideGameMenu();
  } else if (MenuType == eMenuSetupRace) {
    SwitchToMenu(PrevMenuType);
  }
}

function on_key_press(eKeyCode key)
{
  if (!gGameMenu.Visible)
    return;
    
  if (MenuType == eMenuCredits) {
    SwitchToMenu(eMenuStart);
    return;
  }
    
  if (key == eKeyEscape) {
    CancelMenu();
  } else if (key == eKeyUpArrow){
    if (MMSelection > 0) {
      MMSelection--;
      UpdateSelection();
    }
  } else if (key == eKeyDownArrow){
    if (MMSelection < MMOptionCount - 1) {
      MMSelection++;
      UpdateSelection();
    }
  } else if (key == eKeyLeftArrow){
    ChangeOption(true);
  } else if (key == eKeyRightArrow){
    ChangeOption(false);
  } else if (key == eKeyReturn || key == eKeySpace){
    ConfirmSelection();
  }
  ClaimEvent();
}
