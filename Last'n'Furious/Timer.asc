// Internal timer references, need them to actually count down
Timer *Timers[MAX_TIMERS];
// Number of seconds in a game tick (updated)
float GameTickTime;


// Find free timer slot, returns internal ID, or -1 if timers limit reached
int FindFreeSlot()
{
  int i;
  for (i = 0; i < MAX_TIMERS; i++)
  {
    if (Timers[i] == null)
      return i;
  }
  return -1;
}
// Remove timer reference
void RemoveRef(this Timer*)
{
  if (this._id >= 0)
  {
    Timers[this._id] = null;
    this._id = -1;
  }
}
// Stop the timer
void Timer::Stop()
{
  this.RemoveRef();
  this._evt = false;
}
// Init timer parameters
void Init(this Timer*, int id, bool realtime, float timeout, RepeatStyle repeat)
{
  this._id = id;
  this._realtime = realtime;
  this._timeout = timeout;
  this._repeat = repeat;
  this._remains = timeout;
  this._evt = false;
}
// Start the timer with the given parameters
Timer *StartTimer(bool realtime, float timeout, RepeatStyle repeat)
{
  int id = FindFreeSlot();
  if (id == -1)
  {
    Display("Timer.asc: timers limit reached, cannot start another timer before any of the active ones has stopped.");
    return null;
  }
  Timer *timer = new Timer;
  timer.Init(id, realtime, timeout, repeat);
  Timers[id] = timer;
  return timer;
}
// Start the timer, giving timeout in game ticks.
static Timer *Timer::Start(int timeout, RepeatStyle repeat)
{
  return StartTimer(false, IntToFloat(timeout), repeat);
}
// Start the timer, giving timeout in real time (seconds).
// Remember that timer can be only as precise as your GameSpeed (40 checks per
// second, or 0.025s by default).
static Timer *Timer::StartRT(float timeout_s, RepeatStyle repeat)
{
  return StartTimer(true, timeout_s, repeat);
}
// Tells whether timer is currently active (counting down).
bool get_IsActive(this Timer*)
{
  return this._id >= 0;
}
// Check to know if timer has expired. This property will only return TRUE once,
// and will reset afterwards until timer restarts (automatically or manually).
bool get_EvtExpired(this Timer*)
{
  return this._evt;
}
// Tells whether timer has just expired. Safe to pass null-pointer.
static bool Timer::HasExpired(Timer *t)
{
  return t != null && t.get_EvtExpired();
}
// Stops the running timer. Safe to pass null-pointer.
static void Timer::StopIt(Timer *t)
{
  if (t != null)
    t.Stop();
}
// Countdown once and check if timeout was reached
bool Countdown(this Timer*)
{
  // Otherwise, counting down
  if (this._realtime)
    this._remains -= GameTickTime;
  else
    this._remains -= 1.0;
  // If timer just ran out, set event flag
  if (this._remains <= TINY_FLOAT)
  {
    this._evt = true;
    if (this._repeat)
      this._remains = this._timeout;
    return this._repeat; // keep the timer only if it is repeating one
  }
  this._evt = false;
  return true;
}

// Repeat each game tick, even if paused or during blocking action
function repeatedly_execute_always()
{
  // FIXME -- temp hack
  if (IsGamePaused())
    return;
  
  // We have to update value of GameTickTime each time, unfortunately, in case game speed changed
  GameTickTime = 1.0 / IntToFloat(GetGameSpeed());

  int i;
  for (i = 0; i < MAX_TIMERS; i++)
  {
    Timer *timer = Timers[i];
    if (timer != null)
    {
      if (!timer.Countdown())
      {
        // If timer has stopped, remove its reference from the array
        // (but keep event flag to let other scripts check it)
        timer.RemoveRef();
      }
    }
  }
}
