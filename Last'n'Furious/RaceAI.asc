
AIType ActiveAIType;
bool HoldAI;
RaceAI RobotsPB[MAX_RACING_CARS];
RaceAIRegionBased RobotsRB[MAX_RACING_CARS];

export ActiveAIType, HoldAI, RobotsPB, RobotsRB;

PathNode Paths[MAX_PATH_NODES];
int FirstPathNode;
int LastPathNode;
int PathNodeCount; // number of nodes in use
int FreePathSlot; // first free slot

export Paths, FirstPathNode, LastPathNode, PathNodeCount, FreePathSlot;

ColorToAngle RegionAngles[16];
DynamicSprite *AIRegions;
DrawingSurface *AIRegionsDS;

export RegionAngles, AIRegions, AIRegionsDS;



void PathNode::Reset()
{
  this.pt = null;
  this.radius = 1.0;
  this.threshold = 1.0;
  this.speed = -1.0;
  this.next = -1;
  this.prev = -1;
}


#define veh Cars[this.vehicleIndex]

protected bool RaceAI::TestShouldChooseNewTarget() {
  if (this.targetPos == null)
    return true;
  // Choose next path node if inside the check radius for current one, or closer to next one.
  int curNode = this.currentNode;
  if (curNode >= 0) {
    int prevNode = Paths[curNode].prev;
    int nextNode = Paths[curNode].next;
    if (nextNode >= 0 &&
        (prevNode < 0 || VectorF.distance(veh.position, Paths[prevNode].pt) > VectorF.distance(Paths[this.currentNode].pt, Paths[prevNode].pt)) &&
        VectorF.distance(veh.position, Paths[nextNode].pt) < VectorF.distance(Paths[this.currentNode].pt, Paths[nextNode].pt))
      return true;
  }
  return VectorF.distance(veh.position, this.targetPos) <= this.targetCheckRadius;
}

protected bool RaceAI::ChooseNewTarget() {
  if (PathNodeCount > 0) {
    if (this.currentNode >= 0 && Paths[this.currentNode].pt != null) {
      this.currentNode = Paths[this.currentNode].next;
    } else {
      this.currentNode = FirstPathNode; // TODO: find nearest?
    }
    this.targetPos = Paths[this.currentNode].pt.clone();
    this.targetCheckRadius = Paths[this.currentNode].radius;
    this.targetThreshold = Paths[this.currentNode].threshold;
    this.targetSpeedHint = Paths[this.currentNode].speed;
  } else {
  }
  return true;
}

protected void RaceAI::DriveToTheTarget() {
  // Turn into target's direction
  // TODO: optimize by not creating new VectorF every time?
  if (this.targetPos == null)
    return;
  this.targetDir = VectorF.subtract(this.targetPos, veh.position);
  
  float angleThreshold;
  if (!this.targetDir.isZero())
    angleThreshold = Maths.ArcTan(this.targetThreshold / this.targetDir.length());
  float angleBetween = VectorF.angleBetween(veh.direction, this.targetDir);
  if (angleBetween >= -angleThreshold && angleBetween <= angleThreshold) {
    veh.steeringWheelAngle = 0.0;
  } else {
    if (angleBetween > 0.0)
      veh.steeringWheelAngle = UISteeringAngle;
    else
      veh.steeringWheelAngle = -UISteeringAngle;
  }
  
  veh.Brakes = 0.0;
  if (this.targetSpeedHint < 0.0) {
    veh.Accelerator = 1.0;
  } else {
    float speed = veh.velocity.length(); // TODO: need only rolling velocity
    if (speed < this.targetSpeedHint) {
      veh.Accelerator = 1.0;
    } else if (speed > this.targetSpeedHint) {
      veh.Accelerator = 0.0;
      veh.Brakes = 1.0;
    }
  }
}

void RaceAI::Reset()
{
  this.vehicleIndex = -1;
  this.currentNode = -1;
  this.targetPos = null;
  this.targetDir = null;
}

void RaceAI::Run(float deltaTime)
{
  if (this.TestShouldChooseNewTarget()) {
    if (!this.ChooseNewTarget())
      return;
  }
  this.DriveToTheTarget();
}

#undef veh



#define veh Cars[this.vehicleIndex]
void RaceAIRegionBased::Run(float deltaTime) {
  
  if (this.vehicleIndex < 0)
    return;
  if (AIRegionsDS == null) {
    if (AIRegions == null)
      return;
    AIRegionsDS = AIRegions.GetDrawingSurface();
  }

  float angleSum;
  int agscolor = AIRegionsDS.GetPixel(FloatToInt(veh.position.x, eRoundNearest), FloatToInt(veh.position.y, eRoundNearest));
  int i;
  for (i == 0; i < 16; i++) {
    if (RegionAngles[i].color == agscolor) {
      angleSum = RegionAngles[i].angle;
      break;
    }
  }
  
  /*
  int i;
  for (i = 0; i < NUM_COLLISION_POINTS; i++) {
    reg = Region.GetAtRoomXY(FloatToInt(veh.collPoint[i].x, eRoundNearest), FloatToInt(veh.collPoint[i].y, eRoundNearest));
    angleSum += RegionAngles[reg.ID];
  }
  angleSum /= IntToFloat(NUM_COLLISION_POINTS + 1);*/
  
  // Steering
  this.targetAngle = angleSum;
  float dirAngle = veh.direction.angle();
  float angleBetween = Maths.AnglePiFast(this.targetAngle - Maths.Angle2Pi(dirAngle));
  
  // HACK: reduce "jittering" when AI is trying to follow strict direction:
  // if the necessary angle is very close to the angle car will turn in one tick, then just adjust yourself
  float steeringDT = UISteeringAngle * deltaTime * 1.1;
  if (Maths.AbsF(angleBetween) <= Maths.AbsF(steeringDT)) {
    veh.steeringWheelAngle = 0.0;
    veh.direction.set2(1.0, 0.0);
    veh.direction.rotate(this.targetAngle);
  }
  // ...otherwise turn properly, without cheating
  else if (angleBetween > 0.0)
    veh.steeringWheelAngle = UISteeringAngle;
  else if (angleBetween < 0.0)
    veh.steeringWheelAngle = -UISteeringAngle;
  else
    veh.steeringWheelAngle = 0.0;
  
  // Always accelerating
  veh.Accelerator = 1.0;
  veh.Brakes = 0.0;
}
#undef veh

void RaceAIRegionBased::Reset()
{
  this.vehicleIndex = -1;
  this.targetAngle = 0.0;
}


function game_start()
{
  ActiveAIType = eAINone;
  int i;
  for (i = 0; i < MAX_RACING_CARS; i++) {
    RobotsPB[i].Reset();
  }
  for (i = 0; i < MAX_RACING_CARS; i++) {
    RobotsRB[i].Reset();
  }
  for (i = 0; i < MAX_PATH_NODES; i++) {
    Paths[i].Reset();
  }
  
  PathNodeCount = 0;
  FirstPathNode = -1;
  LastPathNode = -1;
  FreePathSlot = 0;
  
  // Remember that in AGS Y axis is facing bottom of the screen, therefore angles are increasing CLOCKWISE
  /*
  RegionAngles[6] = 0.0;
  RegionAngles[5] = Maths.Pi / 4.0;
  RegionAngles[3] = Maths.Pi / 2.0;
  RegionAngles[9] = Maths.Pi / 2.0 + Maths.Pi / 4.0;
  RegionAngles[7] = Maths.Pi;
  RegionAngles[11] = Maths.Pi + Maths.Pi / 4.0;
  RegionAngles[1] = Maths.Pi + Maths.Pi / 2.0;
  RegionAngles[4] = Maths.Pi + Maths.Pi / 2.0 + Maths.Pi / 4.0;
  */
}

function repeatedly_execute_always()
{
  if (ActiveAIType == eAINone)
    return;
  if (IsGamePaused() || HoldAI)
    return;

  float delta_time = 1.0 / IntToFloat(GetGameSpeed());
  int i;
  if (ActiveAIType == eAIPaths) {
    for (i = 0; i < MAX_RACING_CARS; i++) {
      if (RobotsPB[i].vehicleIndex >= 0)
        RobotsPB[i].Run(delta_time);
    }
  }
  else if (ActiveAIType == eAIRegions) {
    for (i = 0; i < MAX_RACING_CARS; i++) {
      if (RobotsRB[i].vehicleIndex >= 0)
        RobotsRB[i].Run(delta_time);
    }
  }
}


void ResetAI()
{
  int i;
  for (i = 0; i < MAX_RACING_CARS; i++) {
    RobotsPB[i].Reset();
  }
  for (i = 0; i < MAX_RACING_CARS; i++) {
    RobotsRB[i].Reset();
  }
  
  for (i = 0; i < MAX_PATH_NODES; i++) {
    Paths[i].Reset();
  }
  
  if (AIRegionsDS) {
    AIRegionsDS.Release();
    AIRegionsDS = null;
  }
  if (AIRegions) {
    AIRegions.Delete();
    AIRegions = null;
  }
  
  ActiveAIType = eAINone;
}


function on_event(EventType event, int data)
{
  if (event == eEventLeaveRoom) {
    ResetAI();
  }
}

int FindFirstFreeNode()
{
  int free = -1;
  int i;
  for (i = FreePathSlot; i < MAX_PATH_NODES; i++){
    if (Paths[i].pt == null) {
      free = i;
      break;
    }
  }
  if (free >= 0) {
    FreePathSlot = free;
    return free;
  }
  for (i = 0; i < FreePathSlot; i++){
    if (Paths[i].pt == null) {
      free = i;
      break;
    }
  }
  FreePathSlot = free;
  return free;
}

void LoadAIPaths()
{
  File *f = File.Open("$APPDATADIR$/Data/aipaths.dat", eFileRead);
  if (f == null) {
    f = File.Open("$INSTALLDIR$/Data/aipaths.dat", eFileRead);
    if (f == null)
      return; // no config
  }

  #define node Paths[n]
  int n;
  for (n = 0; n < MAX_PATH_NODES; n++) {
    node.Reset();
  }
  PathNodeCount = 0;
  FirstPathNode = f.ReadInt();
  LastPathNode = f.ReadInt();
  n = FirstPathNode;
  
  int loads;
  do {
    // Let AGS poll music
    loads++;
    if (loads % 50 == 0)
      Wait(1);

    int x = f.ReadInt();
    int y = f.ReadInt();
    node.pt = VectorF.create(x, y);
    node.radius = IntToFloat(f.ReadInt());
    node.threshold = IntToFloat(f.ReadInt());
    node.speed = IntToFloat(f.ReadInt());
    node.prev = f.ReadInt();
    node.next = f.ReadInt();
    PathNodeCount++;
    n = node.next;
  }
  while (n != FirstPathNode);
  #undef node
  FindFirstFreeNode();
}

void SaveAIPaths()
{
  File *f = File.Open("$APPDATADIR$/Data/aipaths.dat", eFileWrite);
  if (f == null) {
    Display("Failed to open 'Data/aipaths.dat' for writing!");
    return;
  }
  f.WriteInt(FirstPathNode);
  f.WriteInt(LastPathNode);
  #define node Paths[i]
  int i = FirstPathNode;
  do {
    f.WriteInt(FloatToInt(node.pt.x, eRoundNearest));
    f.WriteInt(FloatToInt(node.pt.y, eRoundNearest));
    f.WriteInt(FloatToInt(node.radius, eRoundNearest));
    f.WriteInt(FloatToInt(node.threshold, eRoundNearest));
    f.WriteInt(FloatToInt(node.speed, eRoundNearest));
    f.WriteInt(node.prev);
    f.WriteInt(node.next);
    i = node.next;
  }
  while (i != FirstPathNode);
  #undef node
  f.Close();
}



void LoadAIRegions()
{
  AIRegions = DynamicSprite.CreateFromFile("$INSTALLDIR$/Data/airegions.bmp");
  if (AIRegions == null)
    return;

  IniFile ini;
  if (!ini.Load("$INSTALLDIR$/Data/airegions.ini"))
    return; // no config
    
    
  String rgb_name_r = "color_r";
  String rgb_name_g = "color_g";
  String rgb_name_b = "color_b";
  String angle_name = "angle";

  int i;
  for (i = 0; i < 16; i++) {
    String section = String.Format("region%d", i);
    if (!ini.KeyExists(section, rgb_name_r))
      continue;
    RegionAngles[i].rgb[0] = ini.ReadInt(section, rgb_name_r);
    RegionAngles[i].rgb[1] = ini.ReadInt(section, rgb_name_g);
    RegionAngles[i].rgb[2] = ini.ReadInt(section, rgb_name_b);
    RegionAngles[i].color = Game.GetColorFromRGB(RegionAngles[i].rgb[0], RegionAngles[i].rgb[1], RegionAngles[i].rgb[2]);
    RegionAngles[i].angle = Maths.DegreesToRadians(ini.ReadFloat(section, angle_name));
  }
  
  AIRegionsDS = AIRegions.GetDrawingSurface();
}

void LoadAI()
{
  ResetAI();
  
  ActiveAIType = eAINone;
  if (ThisRace.AiAndPhysics == ePhysicsWild) {
    ActiveAIType = eAIPaths;
    LoadAIPaths();
    return;
  }
  else if (ThisRace.AiAndPhysics == ePhysicsSafe) {
    ActiveAIType = eAIRegions;
    LoadAIRegions();
    return;
  }
}

void AssignAIToCar(int car_index)
{
  switch(ActiveAIType) {
    case eAIPaths:
      RobotsPB[car_index].vehicleIndex = car_index;
      RobotsRB[car_index].Reset();
      break;
    case eAIRegions:
      RobotsPB[car_index].Reset();
      RobotsRB[car_index].vehicleIndex = car_index;
      break;
  }
  Cars[car_index].strictCollisions = false;
}

bool IsAIEnabledForCar(int car_index)
{
  switch(ActiveAIType) {
    case eAIPaths:
      return RobotsPB[car_index].vehicleIndex >= 0;
    case eAIRegions:
      return RobotsRB[car_index].vehicleIndex >= 0;
  }
}

void DisableAIForCar(int car_index)
{
  RobotsPB[car_index].Reset();
  RobotsRB[car_index].Reset();
  Cars[car_index].Accelerator = 0.0;
  Cars[car_index].Brakes = 0.0;
  Cars[car_index].steeringWheelAngle = 0.0;
}
