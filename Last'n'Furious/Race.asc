
Race ThisRace;
bool HoldRace;
Racer Racers[MAX_RACING_CARS];
Vehicle Cars[MAX_RACING_CARS];

export ThisRace, HoldRace, Racers, Cars;

RaceNode Checkpoints[MAX_CHECKPOINTS];
int FirstCheckpt;
int LastCheckpt;
int CheckptCount; // number of nodes in use
int FreeCheckptSlot; // first free slot

export Checkpoints, FirstCheckpt, LastCheckpt, CheckptCount, FreeCheckptSlot;

void RaceNode::Reset()
{
  this.pt = null;
  this.order = 0;
  this.next = -1;
  this.prev = -1;
}

void Racer::Activate(int driver)
{
  this.IsActive = true;
  this.Driver = driver;
  this.Lap = 1;
  this.Place = 0;
  this.Time = 0.0;
  this.CurRaceNode = FirstCheckpt;
  this.CheckptsPassed = 0;
}

void Racer::Reset()
{
  this.IsActive = false;
  this.Driver = -1;
  this.Lap = 0;
  this.Place = 0;
  this.Time = 0.0;
  this.Finished = 0;
  this.CurRaceNode = -1;
  this.CheckptsPassed = 0;
}

void OnFinishedRace(int racer)
{
  ThisRace.RacersFinished++;
  Racers[racer].Finished = ThisRace.RacersFinished;
}

void OnLapComplete(int racer)
{
  if (Racers[racer].Lap == ThisRace.Laps) {
    OnFinishedRace(racer);
  } else {
    Racers[racer].Lap++;
  }
}

void Racer::SwitchToNextNode()
{
  this.CheckptsPassed++;
  this.CurRaceNode = Checkpoints[this.CurRaceNode].next;
}

void UpdateRacer(int index, float deltaTime)
{
  if (Racers[index].Finished > 0)
    return;
  // Update time
  Racers[index].Time += deltaTime;
  // Update aimed checkpoint
  if (CheckptCount > 0) {
    if (Racers[index].CurRaceNode < 0) {
      Racers[index].CurRaceNode = FirstCheckpt;
      Racers[index].CheckptsPassed = 0;
    } else {
      int curNode = Racers[index].CurRaceNode;
      int nextNode = Checkpoints[curNode].next;
      if (nextNode >= 0 && VectorF.distance(Cars[index].position, Checkpoints[nextNode].pt) < VectorF.distance(Checkpoints[curNode].pt, Checkpoints[nextNode].pt)) {
        Racers[index].SwitchToNextNode();
        if (Checkpoints[curNode].order == 0 && Racers[index].CheckptsPassed > 1) {
          //OnLapComplete(index);
        }
      }
    }
  }
}

int FindFirstFreeCheckpoint()
{
  int free = -1;
  int i;
  for (i = FreeCheckptSlot; i < MAX_CHECKPOINTS; i++){
    if (Checkpoints[i].pt == null) {
      free = i;
      break;
    }
  }
  if (free >= 0) {
    FreeCheckptSlot = free;
    return free;
  }
  for (i = 0; i < FreeCheckptSlot; i++){
    if (Checkpoints[i].pt == null) {
      free = i;
      break;
    }
  }
  FreeCheckptSlot = free;
  return free;
}

void LoadRaceCheckpoints()
{
  File *f = File.Open("$APPDATADIR$/Data/checkpoints.dat", eFileRead);
  if (f == null) {
    f = File.Open("$INSTALLDIR$/Data/checkpoints.dat", eFileRead);
    if (f == null)
      return; // no config
  }

  #define node Checkpoints[n]
  int n;
  for (n = 0; n < MAX_CHECKPOINTS; n++) {
    node.Reset();
  }
  CheckptCount = 0;
  FirstCheckpt = f.ReadInt();
  LastCheckpt = f.ReadInt();
  n = FirstCheckpt;
  
  int loads;
  do {
    // Let AGS poll music
    loads++;
    if (loads % 50 == 0)
      Wait(1);

    int x = f.ReadInt();
    int y = f.ReadInt();
    node.pt = VectorF.create(x, y);
    node.order = CheckptCount;
    node.prev = f.ReadInt();
    node.next = f.ReadInt();
    CheckptCount++;
    n = node.next;
  }
  while (n != FirstCheckpt);
  #undef node
  f.Close();
  FindFirstFreeCheckpoint();
}

void SaveRaceCheckpoints()
{
  File *f = File.Open("$APPDATADIR$/Data/checkpoints.dat", eFileWrite);
  if (f == null) {
    Display("Failed to open 'Data/checkpoints.dat' for writing!");
    return;
  }
  f.WriteInt(FirstCheckpt);
  f.WriteInt(LastCheckpt);
  #define node Checkpoints[i]
  int i = FirstCheckpt;
  do {
    f.WriteInt(FloatToInt(node.pt.x, eRoundNearest));
    f.WriteInt(FloatToInt(node.pt.y, eRoundNearest));
    f.WriteInt(node.prev);
    f.WriteInt(node.next);
    i = node.next;
  }
  while (i != FirstCheckpt);
  #undef node
  
  f.Close();
}

void ResetRace()
{
  int i;
  for (i = 0; i < MAX_RACING_CARS; i++) {
    Racers[i].Reset();
    ThisRace.DriverPositions[i] = -1;
  }
  for (i = 0; i < MAX_CHECKPOINTS; i++) {
    Checkpoints[i].Reset();
  }
  
  ThisRace.Laps = 0;
  ThisRace.Opponents = 0;
  ThisRace.PlayerDriver = -1;
}

bool RacerIsBehind(int racer1, int racer2)
{
  // when the driver needs to move back in the list?
  // not active
  if (!Racers[racer1].IsActive)
    return true;
  if (!Racers[racer2].IsActive)
    return false;
  // finished the race later
  if (Racers[racer2].Finished > 0 && Racers[racer1].Finished == 0)
    return true;
  if (Racers[racer1].Finished > 0 && Racers[racer2].Finished == 0)
    return false;
  if (Racers[racer1].Finished > 0 && Racers[racer2].Finished > 0)
    return Racers[racer1].Finished > Racers[racer2].Finished;
  // being left behind
  if (Racers[racer1].CheckptsPassed < Racers[racer2].CheckptsPassed)
    return true;
  if (Racers[racer1].CheckptsPassed > Racers[racer2].CheckptsPassed)
    return false;
  return VectorF.distance(Cars[racer1].position, Checkpoints[Racers[racer1].CurRaceNode].pt) >
          VectorF.distance(Cars[racer2].position, Checkpoints[Racers[racer2].CurRaceNode].pt);
}



void RunVeh2VehCollision()
{
  // Detect collisions between each pair of vehicles
  bool impactPairs[MAX_RACING_CARS_SQUARED];
  VectorF *rect[] = new VectorF[4];
  int i;
  for (i = 0; i < MAX_RACING_CARS; i++) {
    if (!Cars[i].IsInit)
      continue;
    int j;
    for (j = 0; j < MAX_RACING_CARS; j++) {
      if (j == i)
        continue;
      if (!Cars[j].IsInit)
        continue;
      if (i > j && impactPairs[i * MAX_RACING_CARS + j])
        continue; // already has impact for this car pair
      rect[0] = Cars[j].collPoint[0];
      rect[1] = Cars[j].collPoint[1];
      rect[2] = Cars[j].collPoint[2];
      rect[3] = Cars[j].collPoint[3];
      VectorF *impact = Cars[i].DetectCollision(rect, Cars[j].velocity, j);
      if (impact != null) {
        impactPairs[i * MAX_RACING_CARS + j] = true;
        Cars[i].velocity.add(impact);
        impact.negate();
        Cars[j].velocity.add(impact);
      }
    }
  }
}


function repeatedly_execute_always()
{
  if (IsGamePaused() || HoldRace)
    return;

  float delta_time = 1.0 / IntToFloat(GetGameSpeed());
  int i;
  // Update state of cars and participants logic
  for (i = 0; i < MAX_RACING_CARS; i++) {
    if (Cars[i].IsInit)
      Cars[i].Run(delta_time);
    if (ThisRace.CarCollisions)
      RunVeh2VehCollision();
    if (Racers[i].IsActive)
      UpdateRacer(i, delta_time);
  }
  // First fill in placements based on order in array; if there are no checkpoints this will remain
  for (i = 0; i < MAX_RACING_CARS; i++) {
    ThisRace.DriverPositions[i] = i;
    Racers[i].Place = i;
  }
  if (CheckptCount > 0) {
    // Find out participants placements
    // Insertion sort algorithm
    /*
    i <- 1
    while i < length(A)
        j <- i
        while j > 0 and A[j-1] > A[j]
            swap A[j] and A[j-1]
            j <- j - 1
        end while
        i <- i + 1
    end while
    */
    i = 1;
    while (i < MAX_RACING_CARS) {
      int j = i;
      while (j > 0 && RacerIsBehind(ThisRace.DriverPositions[j - 1], ThisRace.DriverPositions[j])) {
        int temp = ThisRace.DriverPositions[j];
        ThisRace.DriverPositions[j] = ThisRace.DriverPositions[j - 1];
        ThisRace.DriverPositions[j - 1] = temp;
        j--;
      }
      i++;
    }
    for (i = 0; i < MAX_RACING_CARS; i++) {
      int racer = ThisRace.DriverPositions[i];
      Racers[racer].Place = i;
    }
    /*
    String s = String.Format("%d - %d - %d - %d - %d - %d",
      Racers[0].CheckptsPassed, Racers[1].CheckptsPassed, Racers[2].CheckptsPassed, Racers[3].CheckptsPassed, Racers[4].CheckptsPassed, Racers[5].CheckptsPassed);
    s = s.Append(
    String.Format("[%d - %d - %d - %d - %d - %d", ThisRace.DriverPositions[0], ThisRace.DriverPositions[1], ThisRace.DriverPositions[2], ThisRace.DriverPositions[3], ThisRace.DriverPositions[4], ThisRace.DriverPositions[5]));
    player.SayBackground(s);*/
  }
}

function on_event(EventType event, int data)
{
  if (event == eEventLeaveRoom) {
    
    int i;
    for (i = 0; i < MAX_RACING_CARS; i++) {
      Cars[i].UnInit();
    }
  }
}
