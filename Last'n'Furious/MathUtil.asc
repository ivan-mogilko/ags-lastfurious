
Point *ParsePoint(String s)
{
  int sep_at = s.IndexOf(",");
  if (sep_at < 0)
    return null;
  Point *p = new Point;
  String s1 = s.Substring(0, sep_at);
  String s2 = s.Substring(sep_at + 1, s.Length - sep_at + 1);
  p.x = s1.AsInt;
  p.y = s2.AsInt;
  return p;
}


static int Maths::Abs(int value)
{
  if (value >= 0)
    return value;
  return -value;
}

static int Maths::Max(int a, int b)
{
  if (a >= b)
    return a;
  return b;
}

static int Maths::Min(int a, int b)
{
  if (a <= b)
    return a;
  return b;
}

static int Maths::Clamp(int value, int min, int max)
{
  return Maths.Min(max, Maths.Max(min, value));
}

static float Maths::AbsF(float value)
{
  if (value >= 0.0)
    return value;
  return -value;
}

static float Maths::MaxF(float a, float b)
{
  if (a >= b)
    return a;
  return b;
}

static float Maths::MinF(float a, float b)
{
  if (a <= b)
    return a;
  return b;
}

static float Maths::ClampF(float value, float min, float max)
{
  return Maths.MinF(max, Maths.MaxF(min, value));
}

static int Maths::Angle360(int degrees)
{
  int angle = degrees % 360;
  if (angle >= 0)
    return angle;
  return 360 - (-angle);
}

/*
// TODO: convert to floating points
static float Maths::AnglePi(float rads)
{
  // reduce the angle  
  angle =  angle % 360; 

  // force it to be the positive remainder, so that 0 <= angle < 360  
  angle = (angle + 360) % 360;  

  // force into the minimum absolute value residue class, so that -180 < angle <= 180  
  if (angle > 180)  
      angle -= 360;
}
*/

static float Maths::AnglePiFast(float rads)
{
  if(rads > Maths.Pi)
    return rads - Maths.Pi * 2.0;
  else if(rads < -Maths.Pi)
    return rads + Maths.Pi * 2.0;
  return rads;
}

static float Maths::Angle2Pi(float rads)
{
  float pi2 = Maths.Pi * 2.0;
  // TODO: needs more testing
  float angle;
  if (rads >= 0.0)
    angle = rads - pi2 * IntToFloat(FloatToInt(rads / pi2, eRoundDown));
  else
    angle = rads - pi2 * IntToFloat(FloatToInt(rads / pi2, eRoundUp));
  if (angle >= 0.0)
    return angle;
  return pi2 - (-angle);
}
