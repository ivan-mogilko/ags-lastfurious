
VectorF *VectorF::clone()
{
  VectorF *v = new VectorF;
  v.x = this.x;
  v.y = this.y;
  return v;
}

bool VectorF::isZero()
{
  return this.x > -TINY_FLOAT && this.x < TINY_FLOAT && this.y > -TINY_FLOAT && this.y < TINY_FLOAT;
}

static bool VectorF::isNull(VectorF *v)
{
  return v == null || v.x > -TINY_FLOAT && v.x < TINY_FLOAT && v.y > -TINY_FLOAT && v.y < TINY_FLOAT;
}

float VectorF::angle()
{
  return Maths.ArcTan2(this.y, this.x);
}

float VectorF::length()
{
  return Maths.Sqrt(this.x * this.x + this.y * this.y);
}

float VectorF::lengthSquared()
{
  return (this.x * this.x + this.y * this.y);
}

void VectorF::add(VectorF *v)
{
  this.x += v.x;
  this.y += v.y;
}

void VectorF::add2(float x, float y)
{
  this.x += x;
  this.y += y;
}

void VectorF::addScaled(VectorF *v, float scale)
{
  this.x += v.x * scale;
  this.y += v.y * scale;
}

void VectorF::max(VectorF *other)
{
  this.x = Maths.MaxF(this.x, other.x);
  this.y = Maths.MaxF(this.y, other.y);
}

void VectorF::min(VectorF *other)
{
  this.x = Maths.MinF(this.x, other.x);
  this.y = Maths.MinF(this.y, other.y);
}

void VectorF::negate()
{
  this.x = -this.x;
  this.y = -this.y;
}

void VectorF::normalize()
{
  float len = this.length();
  if (len == 0.0)
      return;
  float n = 1.0 / len;
  this.x *= n;
  this.y *= n;
  return;
}

void VectorF::rotate(float rads)
{
  float x = this.x * Maths.Cos(rads) - this.y * Maths.Sin(rads);
  float y = this.x * Maths.Sin(rads) + this.y * Maths.Cos(rads);
  this.x = x;
  this.y = y;
}

void VectorF::scale(float scale)
{
  this.x *= scale;
  this.y *= scale;
}

void VectorF::set(VectorF *v)
{
  this.x = v.x;
  this.y = v.y;
}

void VectorF::set2(float x, float y)
{
  this.x = x;
  this.y = y;
}

void VectorF::clampXY(VectorF *min, VectorF *max)
{
  this.x = Maths.ClampF(this.x, min.x, max.x);
  this.y = Maths.ClampF(this.y, min.y, max.y);
}

void VectorF::makeZero()
{
  this.x = 0.0;
  this.y = 0.0;
}

void VectorF::truncate(float max_length)
{
  float length = this.length();
  if (length == 0.0)
    return;

  float n = max_length / length;
  if (n < 1.0) {
    this.x *= n;
    this.y *= n;
  }
}

static VectorF *VectorF::create(int x, int y)
{
  VectorF *v = new VectorF;
  v.x = IntToFloat(x);
  v.y = IntToFloat(y);
  return v;
}

static VectorF *VectorF::createF(float x, float y)
{
  VectorF *v = new VectorF;
  v.x = x;
  v.y = y;
  return v;
}

static float VectorF::distance(VectorF *a, VectorF *b)
{
  return Maths.Sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));
}

static float VectorF::dotProduct(VectorF *a, VectorF *b)
{
  return a.x * b.x + a.y * b.y;
}

static float VectorF::angleBetween(VectorF *a, VectorF *b)
{
  // The result of atan's difference will be in the range of -2Pi to +2Pi
  float angle = Maths.ArcTan2(b.y, b.x) - Maths.ArcTan2(a.y, a.x);
  return Maths.AnglePiFast(angle);
}

static float VectorF::projection(VectorF *a, VectorF *b)
{
  if (b.isZero())
    return 0.0;
  return (a.x * b.x + a.y * b.y) / b.length();
}

static VectorF *VectorF::subtract(VectorF *a, VectorF *b)
{
  VectorF *v = new VectorF;
  v.x = a.x - b.x;
  v.y = a.y - b.y;
  return v;
}

static VectorF *VectorF::zero()
{
  return new VectorF;
}
