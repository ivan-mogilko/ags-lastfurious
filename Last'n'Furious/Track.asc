
float Gravity;
float AirResistance;
bool  IsObstacle[MAX_WALKABLE_AREAS];
float TerraSlideFriction[MAX_WALKABLE_AREAS];
float TerraRollFriction[MAX_WALKABLE_AREAS];
float EnvResistance[MAX_WALKABLE_AREAS];
float TerraGrip[MAX_WALKABLE_AREAS];

float get_Gravity(static Track)
{
  return Gravity;
}

void set_Gravity(static Track, float value)
{
  Gravity = value;
}

float get_AirResistance(static Track)
{
  return AirResistance;
}

void set_AirResistance(static Track, float value)
{
  AirResistance = value;
}

bool geti_IsObstacle(static Track, int area)
{
  return IsObstacle[area];
}

void seti_IsObstacle(static Track, int area, bool value)
{
  IsObstacle[area] = value;
}

float geti_TerraSlideFriction(static Track, int area)
{
  return TerraSlideFriction[area];
}

void seti_TerraSlideFriction(static Track, int area, float value)
{
  TerraSlideFriction[area] = value;
}

float geti_TerraRollFriction(static Track, int area)
{
  return TerraRollFriction[area];
}

void seti_TerraRollFriction(static Track, int area, float value)
{
  TerraRollFriction[area] = value;
}

float geti_TerraGrip(static Track, int area)
{
  return TerraGrip[area];
}

void seti_TerraGrip(static Track, int area, float value)
{
  TerraGrip[area] = Maths.ClampF(value, 0.0, 1.0);
}

float geti_EnvResistance(static Track, int area)
{
  return EnvResistance[area];
}

void seti_EnvResistance(static Track, int area, float value)
{
  EnvResistance[area] = value;
}
