
bool DisplayDebugOverlay;
bool DisplayDebugInfo;
bool DisplayDebugAI;
bool DisplayDebugRace;
int  SelectedPathNode;
DynamicSprite *debugOver;
DynamicSprite *debugAI;

export DisplayDebugOverlay, DisplayDebugInfo, DisplayDebugAI, DisplayDebugRace, SelectedPathNode;

function game_start()
{
  debugOver = DynamicSprite.Create(gDebugOver.Width, gDebugOver.Height, false);
  gDebugOver.BackgroundGraphic = debugOver.Graphic;
  debugAI = DynamicSprite.Create(gDebugOver.Width, gDebugOver.Height, false);
  gDebugAI.BackgroundGraphic = debugAI.Graphic;
  SelectedPathNode = -1;
}

void UpdateDebugAIRegions(DrawingSurface *ds)
{
  ds.DrawingColor = Game.GetColorFromRGB(255, 255, 255);
  
  int i;
  for (i = 0; i < MAX_RACING_CARS; i++) {
    int veh = RobotsRB[i].vehicleIndex;
    if (veh < 0)
      continue;
    
    VectorF *pos = Cars[veh].position;
    if (pos == null)
      continue;
    VectorF *dir = VectorF.create(50, 0);
    dir.rotate(RobotsRB[i].targetAngle);
    dir.add(pos);
    int x1 = FloatToInt(pos.x, eRoundNearest) - Game.Camera.X;
    int y1 = FloatToInt(pos.y, eRoundNearest) - Game.Camera.Y;
    int x2 = FloatToInt(dir.x, eRoundNearest) - Game.Camera.X;
    int y2 = FloatToInt(dir.y, eRoundNearest) - Game.Camera.Y;
    ds.DrawLine(x1, y1, x2, y2);
  }
}
  
void UpdateDebugAIPaths(DrawingSurface *ds)
{
  if (PathNodeCount == 0)
    return;
  
  int from, to;
  from = 0;
  to = MAX_PATH_NODES;
  
  int i;
  for (i = from; i < to; i++) {
    if (Paths[i].pt == null)
      continue;
    VectorF *pt = Paths[i].pt;
    int x = FloatToInt(pt.x, eRoundNearest) - Game.Camera.X;
    int y = FloatToInt(pt.y, eRoundNearest) - Game.Camera.Y;
    
    if (x >= 0 && x <= Screen.Width && y >= 0 && y <= Screen.Height) {
      if (SelectedPathNode == i)
        ds.DrawingColor = Game.GetColorFromRGB(255, 0, 0);
      else
        ds.DrawingColor = Game.GetColorFromRGB(0, 255, 0);
      ds.DrawCircle(x, y, DEBUG_AI_NODE_RADIUS);
    }
    int prev = Paths[i].prev;
    if (prev >= 0) {
      VectorF *ptprev = Paths[prev].pt;
      ds.DrawingColor = Game.GetColorFromRGB(0, 255, 0);
      ds.DrawLine(x, y, FloatToInt(ptprev.x, eRoundNearest) - Game.Camera.X, FloatToInt(ptprev.y, eRoundNearest) - Game.Camera.Y);
    }
    
    if (x >= 0 && x <= Screen.Width && y >= 0 && y <= Screen.Height) {
      ds.DrawingColor = Game.GetColorFromRGB(225, 225, 225);
      ds.DrawString(x + 10, y, eFontFont0, String.Format("#%d: %.2f,%.2f", i, pt.x, pt.y));
      ds.DrawString(x + 10, y + GetFontLineSpacing(eFontFont0), eFontFont0, String.Format("R: %.2f, T: %.2f, S: %.2f", Paths[i].radius, Paths[i].threshold, Paths[i].speed));
    }
  }
  
  if (FirstPathNode != LastPathNode) {
    ds.DrawingColor = Game.GetColorFromRGB(0, 255, 255);
    int x1 = FloatToInt(Paths[FirstPathNode].pt.x, eRoundNearest) - Game.Camera.X;
    int y1 = FloatToInt(Paths[FirstPathNode].pt.y, eRoundNearest) - Game.Camera.Y;
    int x2 = FloatToInt(Paths[LastPathNode].pt.x, eRoundNearest) - Game.Camera.X;
    int y2 = FloatToInt(Paths[LastPathNode].pt.y, eRoundNearest) - Game.Camera.Y;
    ds.DrawLine(x1, y1, x2, y2);
  }
  
  ds.DrawingColor = Game.GetColorFromRGB(128, 0, 128);
  for (i = 0; i < MAX_RACING_CARS; i++) {
    int veh = RobotsPB[i].vehicleIndex;
    if (veh < 0)
      continue;
    VectorF *pos = Cars[veh].position;
    VectorF *target = RobotsPB[i].targetPos;
    if (pos == null || target == null)
      continue;
    int x1 = FloatToInt(pos.x, eRoundNearest) - Game.Camera.X;
    int y1 = FloatToInt(pos.y, eRoundNearest) - Game.Camera.Y;
    int x2 = FloatToInt(target.x, eRoundNearest) - Game.Camera.X;
    int y2 = FloatToInt(target.y, eRoundNearest) - Game.Camera.Y;
    ds.DrawLine(x1, y1, x2, y2);
  }
}

void UpdateDebugAI()
{
  DrawingSurface *ds = debugAI.GetDrawingSurface();
  ds.Clear();

  if (ActiveAIType == eAIPaths)
    UpdateDebugAIPaths(ds);
  else if (ActiveAIType == eAIRegions)
    UpdateDebugAIRegions(ds);
    
  ds.Release();
}


void UpdateDebugRace()
{
  DrawingSurface *ds = debugAI.GetDrawingSurface();
  ds.Clear();
  
  if (CheckptCount == 0)
    return;
  
  int from, to;
  from = 0;
  to = MAX_CHECKPOINTS;
  
  int i;
  for (i = from; i < to; i++) {
    if (Checkpoints[i].pt == null)
      continue;
    VectorF *pt = Checkpoints[i].pt;
    int x = FloatToInt(pt.x, eRoundNearest) - Game.Camera.X;
    int y = FloatToInt(pt.y, eRoundNearest) - Game.Camera.Y;
    
    if (x >= 0 && x <= Screen.Width && y >= 0 && y <= Screen.Height) {
      if (SelectedPathNode == i)
        ds.DrawingColor = Game.GetColorFromRGB(0, 255, 255);
      else
        ds.DrawingColor = Game.GetColorFromRGB(0, 0, 255);
      ds.DrawCircle(x, y, DEBUG_AI_NODE_RADIUS);
    }
    int prev = Checkpoints[i].prev;
    if (prev >= 0) {
      VectorF *ptprev = Checkpoints[prev].pt;
      ds.DrawingColor = Game.GetColorFromRGB(0, 0, 255);
      ds.DrawLine(x, y, FloatToInt(ptprev.x, eRoundNearest) - Game.Camera.X, FloatToInt(ptprev.y, eRoundNearest) - Game.Camera.Y);
    }
    
    if (x >= 0 && x <= Screen.Width && y >= 0 && y <= Screen.Height) {
      ds.DrawingColor = Game.GetColorFromRGB(225, 225, 225);
      ds.DrawString(x + 10, y, eFontFont0, String.Format("#%d: %.2f,%.2f", i, pt.x, pt.y));
      ds.DrawString(x + 10, y + GetFontLineSpacing(eFontFont0), eFontFont0, String.Format("Order: %d", Checkpoints[i].order));
    }
  }
  
  if (FirstCheckpt != LastCheckpt) {
    ds.DrawingColor = Game.GetColorFromRGB(255, 255, 0);
    int x1 = FloatToInt(Checkpoints[FirstCheckpt].pt.x, eRoundNearest) - Game.Camera.X;
    int y1 = FloatToInt(Checkpoints[FirstCheckpt].pt.y, eRoundNearest) - Game.Camera.Y;
    int x2 = FloatToInt(Checkpoints[LastCheckpt].pt.x, eRoundNearest) - Game.Camera.X;
    int y2 = FloatToInt(Checkpoints[LastCheckpt].pt.y, eRoundNearest) - Game.Camera.Y;
    ds.DrawLine(x1, y1, x2, y2);
  }
  
  ds.DrawingColor = Game.GetColorFromRGB(200, 200, 200);
  for (i = 0; i < MAX_RACING_CARS; i++) {
    if (!Cars[i].IsInit || !Racers[i].IsActive)
      continue;
    VectorF *pos = Cars[i].position;
    VectorF *target = Checkpoints[Racers[i].CurRaceNode].pt;
    if (pos == null || target == null)
      continue;
    int x1 = FloatToInt(pos.x, eRoundNearest) - Game.Camera.X;
    int y1 = FloatToInt(pos.y, eRoundNearest) - Game.Camera.Y;
    int x2 = FloatToInt(target.x, eRoundNearest) - Game.Camera.X;
    int y2 = FloatToInt(target.y, eRoundNearest) - Game.Camera.Y;
    ds.DrawLine(x1, y1, x2, y2);
  }
  
  ds.Release();
}




int LastViewportX;
int LastViewportY;
function late_repeatedly_execute_always()
{
  if (IsGamePaused())
    return;
    
  if (!Cars[0].IsInit)
    return;
#define veh Cars[0]
  if (DisplayDebugInfo) {
    String s1 = String.Format("Accel: %.2f; Power: %.2f; Brake: %.2f; Drive force: %.2f; Impact: %.2f[",
                              veh.Accelerator, veh.EnginePower, veh.brakePower, veh.driveWheelForce, veh.infoImpact.length());
    String s2 = String.Format("Pos: %.2f, %.2f; Dir: (%.2f) %.2f, %.2f; Velocity: (%.2f) %.2f, %.2f[",
                              veh.position.x, veh.position.y, veh.direction.angle(), veh.direction.x, veh.direction.y, veh.velocity.length(), veh.velocity.x, veh.velocity.y);
    String s3 = String.Format("Grip: %.2f; AirRes: %.2f; SlideFrict: %.2f; RollFrict: %.2f; CustomTerRes: %.2f; Antiroll: %.2f, Antislide: %.2f[",
                              veh.driveWheelGrip, Track.AirResistance, veh.envSlideFriction, veh.envRollFriction, veh.envResistance,
                              veh.infoRollAntiforce, veh.infoSlideAntiforce);
    String s4 = String.Format("Steer angle: %.2f, Angular velocity: %.2f, Turning accel: (%.2f) %.2f, %.2f",
                              veh.steeringWheelAngle, veh.angularVelocity, veh.turningAccel.length(), veh.turningAccel.x, veh.turningAccel.y);
    lblCarPos.Text = s1.Append(s2);
    lblCarPos.Text = lblCarPos.Text.Append(s3);
    lblCarPos.Text = lblCarPos.Text.Append(s4);
  }
#undef veh
#define veh Cars[i]
  if (DisplayDebugOverlay) {
    int xoff = -Game.Camera.X;
    int yoff = -Game.Camera.Y;
    DrawingSurface *ds = debugOver.GetDrawingSurface();
    ds.Clear(COLOR_TRANSPARENT);
    
    int i;
    for (i = 0; i < MAX_RACING_CARS; i++) {
      if (!veh.IsInit)
        continue;
      // Car vectors
      ds.DrawingColor = Game.GetColorFromRGB(255, 0, 255);
      float dirx = veh.direction.x * 100.0;
      float diry = veh.direction.y * 100.0;
      ds.DrawLine(veh.c.x + xoff, veh.c.y + yoff, veh.c.x + FloatToInt(dirx, eRoundNearest) + xoff, veh.c.y + FloatToInt(diry, eRoundNearest) + yoff);
      ds.DrawingColor = Game.GetColorFromRGB(0, 255, 255);
      dirx = veh.velocity.x * 0.4;// * 100.0;
      diry = veh.velocity.y * 0.4;// * 100.0;
      ds.DrawLine(veh.c.x + xoff, veh.c.y + yoff, veh.c.x + FloatToInt(dirx, eRoundNearest) + xoff, veh.c.y + FloatToInt(diry, eRoundNearest) + yoff);
      // Collision box
      ds.DrawingColor = Game.GetColorFromRGB(255, 0, 0);
      ds.DrawLine(FloatToInt(veh.collPoint[0].x, eRoundNearest) + xoff,
                  FloatToInt(veh.collPoint[0].y, eRoundNearest) + yoff,
                  FloatToInt(veh.collPoint[1].x, eRoundNearest) + xoff,
                  FloatToInt(veh.collPoint[1].y, eRoundNearest) + yoff);
      ds.DrawLine(FloatToInt(veh.collPoint[1].x, eRoundNearest) + xoff,
                  FloatToInt(veh.collPoint[1].y, eRoundNearest) + yoff,
                  FloatToInt(veh.collPoint[2].x, eRoundNearest) + xoff,
                  FloatToInt(veh.collPoint[2].y, eRoundNearest) + yoff);
      ds.DrawLine(FloatToInt(veh.collPoint[2].x, eRoundNearest) + xoff,
                  FloatToInt(veh.collPoint[2].y, eRoundNearest) + yoff,
                  FloatToInt(veh.collPoint[3].x, eRoundNearest) + xoff,
                  FloatToInt(veh.collPoint[3].y, eRoundNearest) + yoff);
      ds.DrawLine(FloatToInt(veh.collPoint[3].x, eRoundNearest) + xoff,
                  FloatToInt(veh.collPoint[3].y, eRoundNearest) + yoff,
                  FloatToInt(veh.collPoint[0].x, eRoundNearest) + xoff,
                  FloatToInt(veh.collPoint[0].y, eRoundNearest) + yoff);
    }
    ds.Release();
  }
#undef veh
  if (DisplayDebugAI) {
    UpdateDebugAI();
  } else if (DisplayDebugRace) {
    UpdateDebugRace();
  }
  LastViewportX = Game.Camera.X;
  LastViewportY = Game.Camera.Y;
}

//
