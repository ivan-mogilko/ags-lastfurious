
bool get_IsInit(this VehicleBase*)
{
  return this.c != null;
}

protected void VehicleBase::ResetBase(VectorF *pos, VectorF *dir)
{
  if (pos == null)
    this.position = VectorF.create(Room.Width / 2, Room.Height / 2);
  else
    this.position = pos.clone();
  if (dir == null)
    this.direction = VectorF.create(0, 1);
  else {
    this.direction = dir.clone();
    this.direction.normalize();
  }
  
  int i;
  for (i = 0; i < NUM_COLLISION_POINTS; i++) {
    this.collPoint[i] = new VectorF;
  }
  
  this.velocity = VectorF.zero();
  this.angularVelocity = 0.0;
}

protected void VehicleBase::RunPhysicsBase(float deltaTime)
{
  // update position using last velocity scaled by time
  this.position.addScaled(this.velocity, deltaTime);
  float rot_angle = this.angularVelocity * deltaTime;
  if (rot_angle != 0.0)
    this.direction.rotate(rot_angle);
}

protected void VehicleBase::DetachCharacter()
{
  this.carSprite = 0;
  this.carSpriteAngle = 0;
  
  if (this.viewFrame != null) {
    this.viewFrame.Graphic = 0;
  }
  this.viewFrame = null;
  
  if (this.dSprite != null){
    this.dSprite.Delete();
  }
  this.dSprite = null;
  this.dSpriteRotation = 0;
  
  if (this.c != null){
    this.c.UnlockView();
  }
  this.c = null;
}

protected void VehicleBase::UnInitBase()
{
  this.DetachCharacter();
  
  int i;
  for (i = 0; i < NUM_COLLISION_POINTS; i++) {
    this.collPointOff[i] = null;
    this.collPoint[i] = null;
  }
  
  this.position = null;
  this.direction = null;
  this.velocity = null;
}

protected void VehicleBase::SyncCharacter()
{
  if (this.c == null || this.position == null)
    return;

  this.c.x = FloatToInt(this.position.x, eRoundNearest);
  this.c.y = FloatToInt(this.position.y, eRoundNearest);
  if (this.c.Room != player.Room)
    this.c.ChangeRoom(player.Room);
  
  int angle = FloatToInt(Maths.RadiansToDegrees(this.direction.angle()), eRoundNearest);
  angle = angle - this.carSpriteAngle;
  angle = Maths.Angle360(angle);
  // TODO: perhaps cache a number of often-used angles to improve perfomance?
  if (this.dSprite == null || angle != this.dSpriteRotation) {
    if (this.dSprite != null)
      this.dSprite.Delete();
    if (angle != 0) {
      DynamicSprite *spr = DynamicSprite.CreateFromExistingSprite(this.carSprite, true);
      spr.Rotate(angle);
      this.dSprite = spr;
      this.viewFrame.Graphic = this.dSprite.Graphic;
      
      // HACK: poke AGS to refresh the character cache
      DrawingSurface *ds = this.dSprite.GetDrawingSurface();
      ds.DrawPixel(-1, -1);
      ds.Release();
    } else {
      this.dSprite = null;
      this.viewFrame.Graphic = this.carSprite;
    }
    this.dSpriteRotation = angle;
  }
  
  // Frame Y offset is composed of two factors:
  // * difference in size between original sprite and rotated one;
  // * character aligns frames to the bottom, meaning character.y is at sprite's bottom line
  int yoff = (Game.SpriteHeight[this.viewFrame.Graphic] - Game.SpriteHeight[this.carSprite]) / 2;
  yoff += Game.SpriteHeight[this.carSprite] / 2;
  this.c.LockViewOffset(this.viewFrame.View, 0, yoff);
  this.c.Loop = this.viewFrame.Loop;
  this.c.Frame = this.viewFrame.Frame;
}

protected void VehicleBase::UpdateBody()
{
  // update collision points with the new position and direction
  int i;
  for (i = 0; i < NUM_COLLISION_POINTS; i++) {
    VectorF *colpt = this.collPoint[i];
    colpt.set(this.collPointOff[i]);
    colpt.rotate(this.direction.angle());
    colpt.add(this.position);
  }
}

void VehicleBase::SetCharacter(Character *c, int carSprite, CharacterDirection carSpriteDir, int view, int loop, int frame)
{
  this.DetachCharacter();
  
  int carl, carw; // car's length and width
  if (carSpriteDir == eDirectionDown || carSpriteDir == eDirectionUp) {
    carl = Game.SpriteHeight[carSprite];
    carw = Game.SpriteWidth[carSprite];
  } else if (carSpriteDir == eDirectionLeft || carSpriteDir == eDirectionRight) {
    carl = Game.SpriteWidth[carSprite];
    carw = Game.SpriteHeight[carSprite];
  } else {
    AbortGame("Source car sprite direction cannot be diagonal, please provide sprite having one of the following directions: left, right, up or down.");
    return;
  }
  
  this.c = c;
  this.carSprite = carSprite;
  this.carSpriteAngle = RotatedView.AngleForLoop(carSpriteDir);
  this.viewFrame = Game.GetViewFrame(view, loop, frame);
  
  this.bodyLength = IntToFloat(carl);
  this.bodyWidth = IntToFloat(carw);
  
  this.collPointOff[0] = VectorF.create(carl / 2, -carw / 2);
  this.collPointOff[1] = VectorF.create(carl / 2, carw / 2);
  this.collPointOff[2] = VectorF.create(-carl / 2, carw / 2);
  this.collPointOff[3] = VectorF.create(-carl / 2, -carw / 2);
  
  this.SyncCharacter();
}

void VehicleBase::Reset(VectorF *pos, VectorF *dir)
{
  this.ResetBase(pos, dir);
  this.UpdateBody();
  this.SyncCharacter();
}

void VehicleBase::Run(float deltaTime)
{
  this.RunPhysicsBase(deltaTime);
  this.UpdateBody();
  this.SyncCharacter();
}

void VehicleBase::UnInit()
{
  this.UnInitBase();
}
