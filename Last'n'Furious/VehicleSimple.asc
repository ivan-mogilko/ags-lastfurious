
protected void VehicleSimple::syncCharacter()
{
  if (this.c == null || this.position == null)
    return;
  this.c.x = FloatToInt(this.position.x, eRoundNearest);
  this.c.y = FloatToInt(this.position.y, eRoundNearest);
  
  int angle = FloatToInt(Maths.RadiansToDegrees(this.direction.angle()), eRoundNearest);
  angle = angle - this.carSpriteAngle;
  angle = Maths.Angle360(angle);
  if (this.sprite == null || angle != this.currentSpriteRotation) {
    if (angle != 0) {
      DynamicSprite *spr = DynamicSprite.CreateFromExistingSprite(this.carSprite, true);
      spr.Rotate(angle);
      this.sprite = spr;
      this.viewFrame.Graphic = this.sprite.Graphic;
    } else {
      this.sprite = null;
      this.viewFrame.Graphic = this.carSprite;
    }
    this.currentSpriteRotation = angle;
  }
  
  // Frame Y offset is composed of two factors:
  // * difference in size between original sprite and rotated one;
  // * character aligns frames to the bottom, meaning character.y is at sprite's bottom line
  int yoff = (Game.SpriteHeight[this.viewFrame.Graphic] - Game.SpriteHeight[this.carSprite]) / 2;
  yoff += Game.SpriteHeight[this.carSprite] / 2;
  this.c.LockViewOffset(this.viewFrame.View, 0, yoff);
  this.c.Loop = this.viewFrame.Loop;
  this.c.Frame = this.viewFrame.Frame;
}

void VehicleSimple::setCharacter(Character *c, int carSprite, CharacterDirection carSpriteDir, int view, int loop, int frame)
{
  int carl, carw; // car's length and width
  if (carSpriteDir == eDirectionDown || carSpriteDir == eDirectionUp) {
    carl = Game.SpriteHeight[carSprite];
    carw = Game.SpriteWidth[carSprite];
  } else if (carSpriteDir == eDirectionLeft || carSpriteDir == eDirectionRight) {
    carl = Game.SpriteWidth[carSprite];
    carw = Game.SpriteHeight[carSprite];
  } else {
    AbortGame("Source car sprite direction cannot be diagonal, please provide sprite having one of the following directions: left, right, up or down.");
    return;
  }
  
  this.c = c;
  this.carSprite = carSprite;
  this.carSpriteAngle = RotatedView.AngleForLoop(carSpriteDir);
  this.viewFrame = Game.GetViewFrame(view, loop, frame);
  
  this.collPointOff[0] = VectorF.create(carl / 2, -carw / 2);
  this.collPointOff[1] = VectorF.create(carl / 2, carw / 2);
  this.collPointOff[2] = VectorF.create(-carl / 2, carw / 2);
  this.collPointOff[3] = VectorF.create(-carl / 2, -carw / 2);
  
  this.colpt[0] = new Point;
  this.colpt[1] = new Point;
  this.colpt[2] = new Point;
  this.colpt[3] = new Point;
  
  this.syncCharacter();
}

float get_Brakes(this VehicleSimple*)
{
  return this.brakes;
}

void set_Brakes(this VehicleSimple*, float power)
{
  this.brakes = power;
}

float get_Steering(this VehicleSimple*)
{
  return this.steering;
}

void set_Steering(this VehicleSimple*, float rads)
{
  this.steering = rads;
}

float get_Engine(this VehicleSimple*)
{
  return this.engine;
}

void set_Engine(this VehicleSimple*, float power)
{
  this.engine = power;
}

float get_Friction(this VehicleSimple*)
{
  return this.friction;
}

// reset vehicle, zero all forces and place at given position
void VehicleSimple::reset(VectorF *pos, VectorF *dir)
{
  this.engine = 0.0;
  this.steering = 0.0;
  this.brakes = 0.0;
  this.friction = 0.0;
  //this.resistance = 0.0;
  //this.drag = 0.0;
  
  if (pos == null)
    this.position = VectorF.create(Room.Width / 2, Room.Height / 2);
  else
    this.position = pos.clone();
  if (dir == null)
    this.direction = VectorF.create(0, 1);
  else {
    this.direction = dir.clone();
    this.direction.normalize();
  }
  this.directionAngle = this.direction.angle();
  this.thrust = new VectorF;
  this.brakeForce = new VectorF;
  this.driveVelocityValue = 0.0;
  this.driveVelocity = new VectorF;
  this.impactVelocity = new VectorF;
  this.velocity = new VectorF;
  this.thrustForceValue = 0.0;
  this.brakeForceValue = 0.0;
  this.syncCharacter();
}

protected void VehicleSimple::processInteraction(float deltaTime)
{
  int i;
  float friction[NUM_COLLISION_POINTS];
  float avg_friction = 0.0;
  bool hit_area[NUM_COLLISION_POINTS];
  for (i = 0; i < NUM_COLLISION_POINTS; i++) {
    VectorF *colpoint = this.collPointOff[i].clone();
    colpoint.rotate(this.direction.angle());
    colpoint.add(this.position);
    this.collPoint[i] = colpoint;
    int room_x = FloatToInt(colpoint.x, eRoundNearest);
    int room_y = FloatToInt(colpoint.y, eRoundNearest);
    
    int area = GetWalkableAreaAtRoom(room_x, room_y);
    if (area == 0) {
      // this is obstacle
      hit_area[i] = true;
    } else {
      // this is normal terrain
      friction[i] = Track.TerraSlideFriction[area];
      avg_friction += friction[i];
    
      // For external info
      this.terrafriction[i] = friction[i];
    }
    this.colpt[i].x = FloatToInt(colpoint.x, eRoundNearest);
    this.colpt[i].y = FloatToInt(colpoint.y, eRoundNearest);
  }
  
  // Apply average friction
  avg_friction /= IntToFloat(NUM_COLLISION_POINTS);
  this.friction = avg_friction;
  
  // Calculate impact vectors
  for (i = 0; i < NUM_COLLISION_POINTS; i++) {
    if (!hit_area[i])
      continue;

    VectorF *impact = VectorF.subtract(this.position, this.collPoint[i]);
    impact.normalize();
    impact.scale(Maths.AbsF(this.driveVelocityValue));
    // Adding to impact velocity
    this.impactVelocity.add(impact);
    // Adding impact projection to drive velocity (because it may need to be decreased or increased by this impact)
    float projection = VectorF.projection(impact, this.driveVelocity);
    if (this.driveVelocityValue < 0.0)
      projection = -projection; // this is required, because driveVelocityValue is "directed" same as driveVector relative to the car direction
    this.driveVelocityValue += projection;
  }
}

// Run simple vehicle physics
void VehicleSimple::run(float deltaTime)
{
  // update position using last velocity scaled by time
  this.position.addScaled(this.velocity, deltaTime);
  // update direction using steering scaled by time
  float rot_angle;
  if (this.driveVelocityValue >= 0.0)
    rot_angle = this.steering * deltaTime;
  else
    rot_angle = -this.steering * deltaTime;
  this.directionAngle = Maths.Angle2Pi(this.directionAngle + rot_angle);
  this.direction.rotate(rot_angle);
  
  this.processInteraction(deltaTime);
  
  // update resistance, knowing last velocity
  float absVelocity = Maths.AbsF(this.driveVelocityValue);
  float thrustResistance = this.friction * absVelocity + this.brakes;
  
  // calculate new thrust from direction scaled by engine power minus brake power
  float thrustForce = this.engine * deltaTime;
  float brakeForce = Maths.MinF(thrustResistance * deltaTime, absVelocity);
  if (this.driveVelocityValue < 0.0)
    brakeForce = -brakeForce;
  this.driveVelocityValue += thrustForce - brakeForce;
  
  // apply drive forces to drive velocity
  this.driveVelocity.set(this.direction);
  this.driveVelocity.scale(this.driveVelocityValue);
  this.thrustForceValue = thrustForce;
  this.brakeForceValue = brakeForce;
  
  // update impact velocity
  float impactValue = this.impactVelocity.length();
  if (impactValue > 0.0) {
    impactValue = Maths.MaxF(0.0, impactValue - (this.friction * impactValue * 10.0 + this.brakes) * deltaTime);
    this.impactVelocity.truncate(impactValue);
  }
  
  // now combine all forces
  this.velocity.set(this.driveVelocity);
  this.velocity.add(this.impactVelocity);
  
  // finally, synchronize character with our new parameters
  this.syncCharacter();
}
