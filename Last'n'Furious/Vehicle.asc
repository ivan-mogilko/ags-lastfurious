
float get_Accelerator(this Vehicle*)
{
  return this.engineAccelerator;
}

void set_Accelerator(this Vehicle*, float power)
{
  this.engineAccelerator = Maths.ClampF(power, 0.0, 1.0);
}

float get_EnginePower(this Vehicle*)
{
  return this.enginePower;
}

float get_Brakes(this Vehicle*)
{
  return this.brakePower;
}

void set_Brakes(this Vehicle*, float power)
{
  this.brakePower = Maths.ClampF(power, 0.0, 1.0);
}

protected void Vehicle::UpdateEnviroment()
{
  float slide_friction[NUM_COLLISION_POINTS];
  float roll_friction[NUM_COLLISION_POINTS];
  float env_res[NUM_COLLISION_POINTS];
  float grip[NUM_COLLISION_POINTS];
  float avg_slide_friction = 0.0;
  float avg_roll_friction = 0.0;
  float avg_env_res = 0.0;
  float avg_grip = 0.0;
  
  this.numHits = 0;
  
  int valid_terrain;
  int i;
  for (i = 0; i < NUM_COLLISION_POINTS; i++) {
    VectorF *colpt = this.collPoint[i];
    int room_x = FloatToInt(colpt.x, eRoundNearest);
    int room_y = FloatToInt(colpt.y, eRoundNearest);
    int screen_x = room_x - GetViewportX();
    int screen_y = room_y - GetViewportY();
    
    int area = GetWalkableAreaAt(screen_x, screen_y); // AGS demands screen coordinates for this function :S
    if (Track.IsObstacle[area])
      this.collPtHit[i] = area; // this is obstacle
    else
      this.collPtHit[i] = -1;
      
    if (this.collPtHit[i] >= 0) {
      this.numHits++;
      continue;
    }
    
    valid_terrain++;
    slide_friction[i] = Track.TerraSlideFriction[area];
    avg_slide_friction += slide_friction[i];
    roll_friction[i] = Track.TerraRollFriction[area];
    avg_roll_friction += roll_friction[i];
    env_res[i] = Track.EnvResistance[area];
    avg_env_res += env_res[i];
    grip[i] = Track.TerraGrip[area];
    avg_grip += grip[i];
  }
  
  // Apply average friction and resistance values
  if (valid_terrain > 0) {
    float valid_terrain_f = IntToFloat(valid_terrain);
    avg_slide_friction /= valid_terrain_f;
    this.envSlideFriction = avg_slide_friction;
    avg_roll_friction /= valid_terrain_f;
    this.envRollFriction = avg_roll_friction;
    avg_env_res /= valid_terrain_f;
    this.envResistance = avg_env_res;
    avg_grip /= valid_terrain_f;
    this.envGrip = avg_grip;
  } else {
    this.envSlideFriction = 0.0;
    this.envRollFriction = 0.0;
    this.envResistance = 0.0;
    this.envGrip = 0.0;
  }
  
  this.weightForce = this.bodyMass * Track.Gravity; // TODO: need to count elevation when we support one
  
  this.driveWheelGrip = this.envGrip; // TODO: need to count vehicle's height above ground when we support jumping
                                      // TODO: also, what about connecting to weightForce here?  
}

protected void Vehicle::RunCollision(VectorF *impactVelocity, float deltaTime)
{
  if (this.numHits == 0)
    return; // no collisions
  
  // Calculate impact vectors
  VectorF *posImpact = VectorF.zero();
  VectorF *negImpact = VectorF.zero();
  int i;
  for (i = 0; i < NUM_COLLISION_POINTS; i++) {
    if (this.collPtHit[i] < 0)
      continue; // point is not colliding
    if (this.oldCollPtHit[i] == this.collPtHit[i])
      continue; // HACK: colliding same obstacle, ignore this one

    // Create impact vector, which is a direction from old point's position to the new one
    // (if they match, point did not move in absolute coordinates, and so there is no impact)
    VectorF *impact = VectorF.subtract(this.collPoint[i], this.oldCollPt[i]);
    if (impact.isZero())
      continue;
    impact.normalize();
    // Making projection of velocity vector on this direction of impact
    float velProjection = VectorF.projection(this.velocity, impact);
    // If projection is positive, then turn vector around and scale to projection value
    if (velProjection > 0.0) {
      // Impact must fully negate current velocity project, plus add a negative fraction of original velocity
      impact.scale(-velProjection * (2.0 - this.hardImpactLossFactor));
      // Note that we do not simply summ impact forces, we take the maximum of each vector component,
      // because car can hit obstacles with more than one point.
      posImpact.max(impact);
      negImpact.min(impact);
      
      //Display("velProjection = %f[impact=(%f,%f)[posImpact=(%f,%f)[negImpact=(%f,%f)", velProjection, 
        //      impact.x, impact.y, posImpact.x, posImpact.y, negImpact.x, negImpact.y);
    }
  }
  // Finally, sum up positive and negative direction impacts
  impactVelocity.add(posImpact);
  impactVelocity.add(negImpact);
}

protected void Vehicle::RunPhysics(float deltaTime)
{
  // If there was collision, we need to first return the car to previous position.
  // Normally, we could also check which points did the hit, and add corresponding rotation to the car.
  // But for now we do just linear transition.
  int i;
  if (this.strictCollisions && this.numHits > 0) {
    // Restore old state and reverse-calculate car position from its points
    float x;
    float y;
    for (i = 0; i < NUM_COLLISION_POINTS; i++) {
      this.collPoint[i].set(this.oldCollPt[i]);
      this.collPtHit[i] = this.oldCollPtHit[i];
      x += this.collPoint[i].x;
      y += this.collPoint[i].y;
    }
    this.position.x = x / IntToFloat(NUM_COLLISION_POINTS);
    this.position.y = y / IntToFloat(NUM_COLLISION_POINTS);
  } else {
    // Save old state
    for (i = 0; i < NUM_COLLISION_POINTS; i++) {
      this.oldCollPt[i].set(this.collPoint[i]);
      //this.oldCollPtHit[i] = this.collPtHit[i];
      //this.oldCollPtCarHit[i] = this.collPtCarHit[i];
    }
  }
  // Save old state
  for (i = 0; i < NUM_COLLISION_POINTS; i++) {
    this.oldCollPtHit[i] = this.collPtHit[i];
    this.oldCollPtCarHit[i] = this.collPtCarHit[i];
  }
  
  this.RunPhysicsBase(deltaTime);
  this.UpdateBody();
  this.UpdateEnviroment();
  
  //
  // Engine
  //
  this.enginePower = this.engineMaxPower * this.engineAccelerator;
  
  //
  // Wheel drive
  //
  // Wheel's torque and drive force match engine's power, minus brakes
  this.driveWheelTorque = this.enginePower;
  this.driveWheelTorque -= this.driveWheelTorque * this.brakePower;
  // Wheel's force depends on torque and grip
  this.driveWheelForce = this.driveWheelTorque * this.driveWheelGrip;
  
  //
  // Steering
  //
  // Split current velocity on two components: rolling velocity (car's direction)
  // and sliding velocity (perpendicular to car's direction).
  //
  VectorF *rollDirection = this.direction.clone();
  VectorF *slideDirection = rollDirection.clone();
  slideDirection.rotate(Maths.Pi / 2.0);
  float rollingVelocity = VectorF.projection(this.velocity, rollDirection);
  float slidingVelocity = VectorF.projection(this.velocity, slideDirection);
  
  this.turningAccel.makeZero();
  if (this.velocity.isZero()) {
      // If the car is standing still, we allow player to turn the car without linear velocity
      this.angularVelocity = this.steeringWheelAngle * this.stillTurningVelocity;
  } else {
    // Rolling direction is basically our drive wheel direction.
    // We calculate the direction and rolling projection of the steering wheel now.
    if (this.steeringWheelAngle != 0.0) {
      // Create the centripetal acceleration, which is going to be perpendicular to the steering direction.
      // Note, that if we create ideal acceleration, it will fully translate existing rolling velocity
      // to the new direction, which will totally negate any kind of drift. While this may be more or less
      // okay for low car speeds, that's not acceptable for hugh-speed racing.
      //
      // TODO: find a simplier/faster calculation?!
      
      float steerAngle = this.steeringWheelAngle;
      
      VectorF *driveWheelPos = this.position.clone();
      VectorF *steerWheelPos = this.position.clone();
      driveWheelPos.addScaled(this.direction, -this.distanceBetweenAxles / 2.0);
      steerWheelPos.addScaled(this.direction, this.distanceBetweenAxles / 2.0);
      VectorF *driveWheelMovement = rollDirection.clone();
      VectorF *steerWheelMovement = rollDirection.clone();
      steerWheelMovement.rotate(steerAngle);
      driveWheelPos.addScaled(driveWheelMovement, rollingVelocity);
      steerWheelPos.addScaled(steerWheelMovement, rollingVelocity);
      VectorF *newPosDir = VectorF.subtract(steerWheelPos, driveWheelPos);
      newPosDir.normalize();
      
      this.angularVelocity = VectorF.angleBetween(this.direction, newPosDir);
      // simple wheel grip dependance (we do not want it turn as fast on slippery surfaces)
      this.angularVelocity *= this.envGrip;
      
      float dumb_drift_factor = Maths.ArcTan(Maths.AbsF(rollingVelocity / this.driftVelocityFactor)) / (Maths.Pi / 2.0);
      this.turningAccel = VectorF.subtract(newPosDir, rollDirection);
      this.turningAccel.scale(rollingVelocity * (1.0 - dumb_drift_factor) * this.envGrip);
    } else {
      this.angularVelocity = 0.0;
    }
  }
  
  //
  // Applying forces
  //
  VectorF *rollResDir = rollDirection.clone();
  rollResDir.scale(-rollingVelocity); // TODO: find simplier way to get correct vector direction
  rollResDir.normalize();
  VectorF *slideResDir = slideDirection.clone();
  slideResDir.scale(-slidingVelocity);// TODO: find simplier way to get correct vector direction
  slideResDir.normalize();
  
  // Set drive force
  float driveForce = (this.driveWheelForce * deltaTime) / this.bodyMass;
  
  // Both friction and resistance can work against both projections, but there is difference:
  // * enviromental resistance force always fully works against both projections;
  //   it is proportional to the actual velocity (higher velocity makes higher enviromental resistance).
  // * enviromental friction force always fully works against sliding projection, and
  //   is appliance against rolling projection is proportional on brakePower (how much the wheels are locked);
  //   in general it is proportional to the car's weightForce.
  //
  // TODO: apply very small but distinct friction to rolling dir
  rollingVelocity = Maths.AbsF(rollingVelocity);
  slidingVelocity = Maths.AbsF(slidingVelocity);
  
  float slide_friction = this.envSlideFriction * this.weightForce; // Slide_friction_force = friction_factor * weight_force
  float roll_friction = this.envRollFriction * this.weightForce; // Roll_friction_force = (friction_factor / wheelradius) * weight_force
  float airres_force = 0.5 * Track.AirResistance * this.bodyAerodynamics;  // Air resistance = 1/2 * enviroment_factor * aerodynamic_factor * v^2
  float env_res_force = this.envResistance; // We take Env resistance = factor * v (that's general simplification)
  
  // Final anti-forces
  float rollAF = ((slide_friction * this.brakePower + roll_friction * (1.0 - this.brakePower) +
                    airres_force * rollingVelocity * rollingVelocity + env_res_force * rollingVelocity) * deltaTime) / this.bodyMass;
  float slideAF = ((slide_friction + airres_force * slidingVelocity * slidingVelocity + env_res_force * slidingVelocity) * deltaTime) / this.bodyMass;
  
  rollAF = Maths.ClampF(rollAF, 0.0, rollingVelocity);
  slideAF = Maths.ClampF(slideAF, 0.0, slidingVelocity);
  
  this.infoRollAntiforce = rollAF;
  this.infoSlideAntiforce = slideAF;
  
  //
  // Finally, apply all forces in the correspoding directions
  //
  // First goes drive thrust
  this.velocity.addScaled(rollDirection, driveForce);
  // Then we apply friction... and making sure it does not push object to the opposite direction;
  // we have to do this, because floating point calculations are never precise!
  float x1 = this.velocity.x;
  float y1 = this.velocity.y;
  this.velocity.addScaled(slideResDir, slideAF);
  this.velocity.addScaled(rollResDir, rollAF);
  float x2 = this.velocity.x;
  float y2 = this.velocity.y;
  if (x1 >= 0.0 && x2 < 0.0 || x1 <= 0.0 && x2 > 0.0)
    this.velocity.x = 0.0;
  if (y1 >= 0.0 && y2 < 0.0 || y1 <= 0.0 && y2 > 0.0)
    this.velocity.y = 0.0;
  // Apply turning acceleration
  this.velocity.addScaled(this.turningAccel, deltaTime);
  
  //
  // Run collisions.
  // Do this last, so that new velocities will be taken into account,
  // otherwise car may continue moving into an obstacle.
  //
  VectorF *impactVelocity = VectorF.zero();
  this.RunCollision(impactVelocity, deltaTime);
  // ...and apply impact forces
  this.velocity.add(impactVelocity);
  // save impact forces for external reading
  this.infoImpact.set(impactVelocity);
}

void Reset(this Vehicle*, VectorF *pos, VectorF *dir)
{
  this.ResetBase(pos, dir);
  
  this.engineMaxPower = 200.0;
  this.engineAccelerator = 0.0;
  this.enginePowerGoal = 0.0;
  this.enginePower = 0.0;
  this.brakePower = 0.0;
  this.driveWheelTorque = 0.0;
  this.driveWheelForce = 0.0;
  
  this.distanceBetweenAxles = this.bodyLength / 2.0;
  this.stillTurningVelocity = 4.0;
  this.driftVelocityFactor = 240.0;
  this.steeringWheelAngle = 0.0;
  this.turningAccel = new VectorF;
  
  // TODO: move to init function, set by user
  this.bodyMass = 1.0;
  this.bodyAerodynamics = 1.0;
  this.hardImpactLossFactor = 0.5;
  this.softImpactLossFactor = 0.8;
  
  this.weightForce = 0.0;
  this.envGrip = 0.0;
  this.envSlideFriction = 0.0;
  this.envRollFriction = 0.0;
  this.envResistance = 0.0;
  
  this.infoRollAntiforce = 0.0;
  this.infoSlideAntiforce = 0.0;
  this.infoImpact = new VectorF;
  
  int i;
  for (i = 0; i < NUM_COLLISION_POINTS; i++) {
    this.oldCollPt[i] = new VectorF;
    this.collPtHit[i] = -1;
    this.oldCollPtHit[i] = -1;
    this.collPtCarHit[i] = -1;
    this.oldCollPtCarHit[i] = -1;
  }
  this.numHits = 0;
  this.numCarHits = 0;
  
  this.UpdateBody();
  this.SyncCharacter();
}

void Run(this Vehicle*, float deltaTime)
{
  this.RunPhysics(deltaTime);
  this.SyncCharacter();
}

void UnInit(this Vehicle*)
{
  this.UnInitBase();
  
  int i;
  for (i = 0; i < NUM_COLLISION_POINTS; i++) {
    this.oldCollPt[i] = null;
  }
}

VectorF *Vehicle::DetectCollision(VectorF *rect[], VectorF *otherVelocity, int otherIndex)
{
    // TODO: rewrite algorithm into collision with polygon (any number of points)
    // Rectangle hit algorithm copied from the internet in haste
    /*
  p21 = (x2 - x1, y2 - y1)
p41 = (x4 - x1, y4 - y1)

p21magnitude_squared = p21[0]^2 + p21[1]^2
p41magnitude_squared = p41[0]^2 + p41[1]^2

for x, y in list_of_points_to_test:

    p = (x - x1, y - y1)

    if 0 <= p[0] * p21[0] + p[1] * p21[1] <= p21magnitude_squared:
        if 0 <= p[0] * p41[0] + p[1] * p41[1]) <= p41magnitude_squared:
            return "Inside"
        else:
            return "Outside"
    else:
        return "Outside"
  */
  
  this.numCarHits = 0;
  
  VectorF *p21 = VectorF.subtract(rect[1], rect[0]);
  VectorF *p41 = VectorF.subtract(rect[3], rect[0]);
  
  float p21magnitude_squared = p21.x *p21.x + p21.y * p21.y;
  float p41magnitude_squared = p41.x *p41.x + p41.y * p41.y;
  
  int i;
  for (i = 0; i < NUM_COLLISION_POINTS; i++) {
    this.collPtCarHit[i] = -1;
    VectorF *p = VectorF.subtract(this.collPoint[i], rect[0]);
    float pp21 = p.x * p21.x + p.y * p21.y;
    if (pp21 >= 0.0 && pp21 <= p21magnitude_squared) {
      float pp41 = p.x * p41.x + p.y * p41.y;
      if (pp41 >= 0.0 && pp41 <= p41magnitude_squared) {
        this.collPtCarHit[i] = otherIndex;
        this.numCarHits++;
      }
    }
  }
  
  if (this.numCarHits == 0)
    return null;
    
  
  //
  // TERRIBLE!!!
  //
  // What follows is a copy-paste of the RunCollisions function
  // Because I do not have time to devise a generic function :(((((
  //
  VectorF *impactVelocity = new VectorF;
  
  // Calculate impact vectors
  VectorF *posImpact = VectorF.zero();
  VectorF *negImpact = VectorF.zero();
  for (i = 0; i < NUM_COLLISION_POINTS; i++) {
    if (this.collPtCarHit[i] < 0)
      continue; // point is not colliding
    if (this.oldCollPtCarHit[i] == this.collPtCarHit[i])
      continue; // HACK: colliding same obstacle, ignore this one

    // TODO: here we only take THIS car's movement into account, which is wrong,
    // we also need to know how other car had moved

    // Create impact vector, which is a direction from old point's position to the new one
    // (if they match, point did not move in absolute coordinates, and so there is no impact)
    VectorF *impact = VectorF.subtract(this.collPoint[i], this.oldCollPt[i]);
    if (impact.isZero())
      continue;
    impact.normalize();
    // Making projection of velocity vector on this direction of impact
    float velProjection = VectorF.projection(this.velocity, impact);
    // If projection is positive, then turn vector around and scale to projection value
    if (velProjection > 0.0) {
      // Unlike hit with the wall, impact here is a smaller negative fraction of original velocity
      impact.scale(-velProjection * (1.0 - this.softImpactLossFactor));
      // Note that we do not simply summ impact forces, we take the maximum of each vector component,
      // because car can hit obstacles with more than one point.
      posImpact.max(impact);
      negImpact.min(impact);
      
      //Display("velProjection = %f[impact=(%f,%f)[posImpact=(%f,%f)[negImpact=(%f,%f)", velProjection, 
        //      impact.x, impact.y, posImpact.x, posImpact.y, negImpact.x, negImpact.y);
      impact.negate();
      impact.normalize();
    }
    // And project other body's velocity
    float otherProjection = VectorF.projection(otherVelocity, impact);
    if (otherProjection < 0.0) {
      impact.scale(otherProjection * (1.0 - this.softImpactLossFactor));
      posImpact.max(impact);
      negImpact.min(impact);
    }
  }
  // Finally, sum up positive and negative direction impacts
  impactVelocity.add(posImpact);
  impactVelocity.add(negImpact);
  
  return impactVelocity;
}
