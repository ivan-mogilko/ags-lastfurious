bool RaceBuilderEnabled;
export RaceBuilderEnabled;

// TODO: consider using my Drag&Drop module if controls become more complicated
bool WasMouseDown;
int WasMouseX;
int WasMouseY;

void EnableRaceBuilder(bool enable)
{
  DisplayDebugRace = enable;
  gDebugAI.Visible = enable;
  Mouse.Visible = enable;
  RaceBuilderEnabled = enable;
  
  if (enable)
    UpdateDebugRace();
}

#define PATH_NODE_SELECT_THRESHOLD (DEBUG_AI_NODE_RADIUS * 2)

int TryHitNode(int x, int y, float threshold)
{
  if (CheckptCount == 0)
    return -1;
  
  VectorF *hit = VectorF.create(x, y);
  float minDist = 9999.0;
  int nearestNode = -1;
  int i;
  for (i = 0; i < MAX_PATH_NODES; i++) {
    if (Checkpoints[i].pt == null)
      continue;
    float dist = VectorF.distance(hit, Checkpoints[i].pt);
    if (dist <= threshold && dist < minDist) {
      minDist = dist;
      nearestNode = i;
    }
  }
  return nearestNode;
}

void OnNewNode(int newnode, int prev, int next)
{
  if (prev < 0) {
    FirstCheckpt = newnode;
    Checkpoints[newnode].prev = FirstCheckpt;
  } else {
    Checkpoints[newnode].prev = prev;
    Checkpoints[prev].next = newnode;
  }
  
  if (next < 0) {
    LastCheckpt = newnode;
    Checkpoints[newnode].next = LastCheckpt;
  } else {
    Checkpoints[newnode].next = next;
    Checkpoints[next].prev = newnode;
  }
  
  if (prev == LastCheckpt)
    LastCheckpt = newnode;
    
  
  
  //Display("first = %d, last = %d;[prev = %d, next = %d", FirstCheckpt, LastCheckpt, Checkpoints[newnode].prev, Checkpoints[newnode].next);
}

int PutNewNode(int x, int y)
{
  if (FreeCheckptSlot < 0)
    return;
  int newnode = FreeCheckptSlot;
  Checkpoints[newnode].Reset();
  Checkpoints[newnode].pt = VectorF.create(x, y);
  OnNewNode(newnode, LastCheckpt, FirstCheckpt);
  Checkpoints[newnode].order = CheckptCount;
  CheckptCount++;
  FindFirstFreeCheckpoint();
  return newnode;
}

void DeleteNode(int node)
{
  if (node < 0 || node >= MAX_PATH_NODES)
    return;
  int nodep = Checkpoints[node].prev;
  int noden = Checkpoints[node].next;

  if (node == nodep && node == noden) {
    FirstCheckpt = -1;
    LastCheckpt = -1;
  } else {
    if (nodep >= 0)
      Checkpoints[nodep].next = noden;
    if (noden >= 0)
      Checkpoints[noden].prev = nodep;
    if (node == FirstCheckpt)
      FirstCheckpt = noden;
    if (node == LastCheckpt)
      LastCheckpt = nodep;
  }
  //Display("first = %d, last = %d", FirstCheckpt, LastCheckpt);
  Checkpoints[node].Reset();
  CheckptCount--;
  
  int fixnode = noden;
  while (fixnode != FirstCheckpt) {
    Checkpoints[fixnode].order--;
    fixnode = Checkpoints[fixnode].next;
  }
  
  FindFirstFreeCheckpoint();
  
  if (SelectedPathNode == node)
    SelectedPathNode = -1;
}

int TryInsertNode(int refNode, int x, int y)
{
  if (FreeCheckptSlot < 0)
    return;
  int nodep = Checkpoints[refNode].prev;
  int noden = Checkpoints[refNode].next;
  if (nodep < 0 && noden < 0)
    return PutNewNode(x, y);
  int nodeopp;
  if (nodep < 0) {
    nodeopp = noden;
  } else if (noden < 0) {
    nodeopp = nodep;
  } else {
    VectorF *hit = VectorF.create(x, y);
    VectorF *hitDir = VectorF.subtract(hit, Checkpoints[refNode].pt);
    VectorF *nextDir = VectorF.subtract(Checkpoints[noden].pt, Checkpoints[refNode].pt);
    VectorF *prevDir = VectorF.subtract(Checkpoints[nodep].pt, Checkpoints[refNode].pt);
    if (Maths.AbsF(VectorF.angleBetween(hitDir, nextDir)) <= Maths.AbsF(VectorF.angleBetween(hitDir, prevDir)))
      nodeopp = noden;
    else
      nodeopp = nodep;
  }
  
  // Put new node in the middle
  VectorF *newpt = Checkpoints[refNode].pt.clone();
  newpt.add(Checkpoints[nodeopp].pt);
  newpt.scale(0.5);
  
  int insertPrev;
  int insertNext;
  if (nodeopp == noden) {
    insertPrev = refNode;
    insertNext = noden;
  } else {
    insertPrev = nodep;
    insertNext = refNode;
  }
  int newnode = FreeCheckptSlot;
  Checkpoints[newnode].Reset();
  Checkpoints[newnode].pt = newpt;
  OnNewNode(newnode, insertPrev, insertNext);
  CheckptCount++;
  
  int fixnode = insertNext;
  while (fixnode != FirstCheckpt) {
    Checkpoints[fixnode].order++;
    fixnode = Checkpoints[fixnode].next;
  }
  
  
  FindFirstFreeCheckpoint();
  return newnode;
}

function game_start()
{
}

function on_mouse_click(MouseButton button)
{
  if (!RaceBuilderEnabled)
    return;

  if (button == eMouseLeft) {
    SelectedPathNode = TryHitNode(mouse.x + Game.Camera.X, mouse.y + Game.Camera.Y, IntToFloat(PATH_NODE_SELECT_THRESHOLD));
    WasMouseX = mouse.x;
    WasMouseY = mouse.y;
  }
  else if (button == eMouseRight) {
    PutNewNode(mouse.x + Game.Camera.X, mouse.y + Game.Camera.Y);
  }
}

function on_key_press(eKeyCode key) 
{
  if (!RaceBuilderEnabled)
    return;
    
  if (SelectedPathNode >= 0) {
    if (key == eKeyDelete) {
      DeleteNode(SelectedPathNode);
    } else if (key == eKeyInsert) {
      TryInsertNode(SelectedPathNode, mouse.x + Game.Camera.X, mouse.y + Game.Camera.Y);
    }
  }
}

function repeatedly_execute_always()
{
  if (!RaceBuilderEnabled)
    return;
  if (IsGamePaused())
    return;

  if (SelectedPathNode >= 0 && Mouse.IsButtonDown(eMouseLeft) && 
      WasMouseDown && (mouse.x != WasMouseX || mouse.y != WasMouseY)) {
    Checkpoints[SelectedPathNode].pt.x = IntToFloat(mouse.x + Game.Camera.X);
    Checkpoints[SelectedPathNode].pt.y = IntToFloat(mouse.y + Game.Camera.Y);
  }
  WasMouseDown = Mouse.IsButtonDown(eMouseLeft);
}
