
#define MAX_DIRECTIONS 8
int LoopAngles[MAX_DIRECTIONS];
//CharacterDirection AngleToLoop[MAX_DIRECTIONS];

void InitLoopAngles()
{
  // AGS has Y axis down, and angles are counted clockwise
  LoopAngles[eDirectionRight] = 0;
  LoopAngles[eDirectionDownRight] = 45;
  LoopAngles[eDirectionDown] = 90;
  LoopAngles[eDirectionDownLeft] = 135;
  LoopAngles[eDirectionLeft] = 180;
  LoopAngles[eDirectionUpLeft] = 225;
  LoopAngles[eDirectionUp] = 270;
  LoopAngles[eDirectionUpRight] = 315;
  /*
  int l;
  for (l = 0; l < MAX_DIRECTIONS; i++)
  {
    AngleToLoop[l] = 
  }
  */
}

/*
static CharacterDirection RotatedView::GetNearestDirection(int angle)
{
  angle = angle % 360;
  int l;
  
}
*/

static int RotatedView::AngleForLoop(CharacterDirection loop)
{
  return LoopAngles[loop];
}

static DynamicSprite *[] RotatedView::CreateLoop(int view, int loop, int base_loop)
{
  if (loop == base_loop || view >= Game.ViewCount || loop >= Game.GetLoopCountForView(view) ||
      base_loop >= Game.GetLoopCountForView(view))
    return null;

  int rot_angle = LoopAngles[loop] - LoopAngles[base_loop];
  rot_angle = Maths.Angle360(rot_angle);
  
  int frame;
  int base_frame_count = Game.GetFrameCountForLoop(view, base_loop);
  int dest_frame_count = Game.GetFrameCountForLoop(view, loop);
  int frame_count = Maths.Max(base_frame_count, dest_frame_count);
  
  // Create new rotated sprites for every frame in the base loop
  DynamicSprite *sprarr[] = new DynamicSprite[frame_count];
  for (frame = 0; frame < frame_count; frame++) {
    ViewFrame *vf = Game.GetViewFrame(view, base_loop, frame);
    DynamicSprite *spr = DynamicSprite.CreateFromExistingSprite(vf.Graphic);
    spr.Rotate(rot_angle);
    vf = Game.GetViewFrame(view, loop, frame);
    vf.Graphic = spr.Graphic;
    sprarr[frame] = spr;
  }
  // Return array containing new sprites for this loop
  return sprarr;
}

static DynamicSprite *[] RotatedView::CreateAllLoops(int view, int base_loop)
{
  if (view >= Game.ViewCount)
    return null;
  
  int loop;
  int loop_count = Game.GetLoopCountForView(view);
  int frames_total;
  // We have to calculate all the frames in all the loops first,
  // because AGS does not support arrays in arrays :(
  for (loop = 0; loop < loop_count; loop++) {
    if (loop == base_loop)
      continue;
    frames_total += Game.GetFrameCountForLoop(view, loop);
  }
  
  // Array to save sprites for all the custom loops
  DynamicSprite *spr_all[] = new DynamicSprite[frames_total];
  int write_at = 0; // this is where next bunch of sprites are saved
  
  for (loop = 0; loop < loop_count; loop++) {
    if (loop == base_loop)
      continue;
    int frame_count = Game.GetFrameCountForLoop(view, loop);
    DynamicSprite *spr_loop[] = RotatedView.CreateLoop(view, loop, base_loop);
    
    // Copy sprite pointers to the "all sprites" array
    int frame;
    for (frame = 0; frame < frame_count; frame++) {
      spr_all[write_at + frame] = spr_loop[frame];
    }
    write_at += frame_count;
  }
  
  // Return array containing dynamic sprites for all the loops
  return spr_all;
}

function game_start()
{
  InitLoopAngles();
}
