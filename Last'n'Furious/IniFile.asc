/******************************************************************************
 * Ini module source file -- see header file for more information.            *
 ******************************************************************************/

// Invariant 1: length <= INIFILE_BUFFER_SIZE
// Invariant 2: for all i: length <= i < INIFILE_BUFFER_SIZE: lines[i] == null

//------------------------------------------------------------------------------
// Trim: Returns a string with the left and right whitespace removed.

String Trim(this String *)
{
  int left = 0;
  int right = this.Length - 1;
  
  while ((left < right) && ((this.Chars[left] == ' ') || (this.Chars[left] == 9)))
    left++;
  
  while ((right > left) && ((this.Chars[right] == ' ') || (this.Chars[right] == 9)))
    right--;
  
  if (left > right)
    return "";
  
  return this.Substring(left, right - left + 1);
}

//==============================================================================
// InsertLine:
//   Inserts a new line in the ini file at specified index, returns success.

bool InsertLine(this IniFile *, int index)
{
  if ((this.length == INIFILE_BUFFER_SIZE) || (index < 0) || (index > this.length))
    return false;
  
  this.length++;
  int i = this.length;
  while (i > index)
  {
    i--;
    this.lines[i + 1] = this.lines[i];
  }
  
  return true;
}

//------------------------------------------------------------------------------
// DeleteLine:
//   Deletes a new line in the ini file at specified index, returns success.

bool DeleteLine(this IniFile *, int index)
{
  if ((index < 0) || (index >= this.length))
    return false;
  
  this.length--;
  while (index < this.length)
  {
    this.lines[index] = this.lines[index + 1];
    index++;
  }
  
  this.lines[this.length + 1] = null;
  return true;
}

//------------------------------------------------------------------------------
// FindSection: Returns the line that contains the requested section header
//   or `length` when not found.

int FindSection(this IniFile *, String section)
{
  int i = 0, j;
  String str;
  
  section = section.LowerCase();
  while (i < this.length)
  {
    str = this.lines[i];
    if (!String.IsNullOrEmpty(str) && (str.Chars[0] == '['))
    {
      j = str.IndexOf("]");
      if (j > 1)
      {
        str = str.Substring(1, j - 1);
        if (str.LowerCase() == section)
          return i;
      }
    }
    i++;
  }
  return i;
}

//------------------------------------------------------------------------------
// FindSection: Returns the line that contains the requested key in section
//   or `length` when not found.

int FindKey(this IniFile *, String section, String key)
{
  int i = this.FindSection(section) + 1, j;
  String str;
  
  key = key.LowerCase();
  while (i < this.length)
  {
    str = this.lines[i];
    if (!String.IsNullOrEmpty(str))
    {
      if (str.Chars[0] == '[')
        return this.length;
      
      j = str.IndexOf(";");
      if (j >= 0)
        str = str.Truncate(j);
      
      j = str.IndexOf("=");
      if (j > 0)
      {
        str = str.Truncate(j);
        str = str.Trim();
        if (str.LowerCase() == key)
          return i;
      }
    }
    i++;
  }
  return this.length;
}


//------------------------------------------------------------------------------
// FindLastKey: Returns the line that contains the last key of the requested
//   section or the section header when empty; when the section does not exists
//   it tries to create it. When this fails it will return `length`.

int FindLastKey(this IniFile *, String section)
{
  int i = this.FindSection(section);
  int last = i, j;
  String str;
  
  if (i == this.length)
  {
    if (i + 2 > INIFILE_BUFFER_SIZE)
      return this.length;
    
    this.length += 2;
    this.lines[i] = "";
    this.lines[i + 1] = String.Format("[%s]", section);
    return i + 1;
  }

  i++;
  while (i < this.length)
  {
    str = this.lines[i];
    if (!String.IsNullOrEmpty(str))
    {
      if (str.Chars[0] == '[')
        return last;
      
      j = str.IndexOf(";");
      if (j >= 0)
        str = str.Truncate(j);
      
      j = str.IndexOf("=");
      if (j > 0)
        last = i;
    }
    i++;
  }
  return last;
}

//==============================================================================

void IniFile::Clear()
{
  while (this.length)
  {
    this.length--;
    this.lines[this.length] = null;
  }
}

//------------------------------------------------------------------------------

bool IniFile::Load(String filename)
{
  File *file = File.Open(filename, eFileRead);
  if ((file == null) || (file.Error))
    return false;
  
  this.Clear();
  while (!file.EOF && (this.length < INIFILE_BUFFER_SIZE))
  {
    this.lines[this.length] = file.ReadRawLineBack();
    this.length++;
  }
  
  file.Close();
  return true;
}

//------------------------------------------------------------------------------

bool IniFile::Save(String filename)
{
  File *file = File.Open(filename, eFileWrite);
  if ((file == null) || (file.Error))
    return false;
  
  int i = 0;
  while (i < this.length)
  {
    file.WriteRawLine(this.lines[i]);
    i++;
  }
  
  file.Close();
  return true;
}

//------------------------------------------------------------------------------

int IniFile::ListSections(String list[], int size)
{
  int count = 0, i = 0, j;
  String str;
  
  while (i < this.length)
  {
    str = this.lines[i];
    if (!String.IsNullOrEmpty(str) && (str.Chars[0] == '['))
    {
      j = str.IndexOf("]");
      if (j > 1)
      {
        if (count < size)
          list[count] = str.Substring(1, j - 1);
        
        count++;
      }
    }
    i++;
  }
  
  return count;
}

//------------------------------------------------------------------------------

int IniFile::ListKeys(String section, String list[], int size)
{
  int count = 0, i = this.FindSection(section) + 1, j;
  String str;
  
  while (i < this.length)
  {
    str = this.lines[i];
    if (!String.IsNullOrEmpty(str))
    {
      if (str.Chars[0] == '[')
        return count;
      
      j = str.IndexOf(";");
      if (j >= 0)
        str = str.Truncate(j);
      
      j = str.IndexOf("=");
      if (j > 0)
      {
        if (count < size)
        {
          str = str.Truncate(j);
          list[count] = str.Trim();
        }
        count++;
      }
    }
    i++;
  }
  return count;
}

//------------------------------------------------------------------------------

bool IniFile::SectionExists(String section)
{
  return (this.FindSection(section) != this.length);
}

//------------------------------------------------------------------------------

void IniFile::DeleteSection(String section)
{
  int i = this.FindSection(section);
  if (i == this.length)
    return;
  
  int last = this.FindLastKey(section) + 1;
  while (last < this.length)
  {
    this.lines[i] = this.lines[last];
    i++;
    last++;
  }
  
  while (this.length > i)
  {
    this.length--;
    this.lines[this.length] = null;
  }
}

//------------------------------------------------------------------------------

bool IniFile::KeyExists(String section, String key)
{
  return (this.FindKey(section, key) != this.length);
}

//------------------------------------------------------------------------------

void IniFile::DeleteKey(String section, String key)
{
  int i = this.FindKey(section, key);
  if (i != this.length)
    this.DeleteLine(i);
}

//------------------------------------------------------------------------------

String IniFile::Read(String section, String key, String value)
{
  int i = this.FindKey(section, key);
  if (i == this.length)
    return value;
  
  key = this.lines[i];
  i = key.IndexOf("=") + 1;
  
  if (i == key.Length)
    return value;
  
  key = key.Substring(i, key.Length - i);
  key = key.Trim();
  return key;
}

//------------------------------------------------------------------------------

int IniFile::ReadInt(String section, String key, int value)
{
  int i = this.FindKey(section, key);
  if (i == this.length)
    return value;
  
  key = this.lines[i];
  i = key.IndexOf("=") + 1;
  
  if (i == key.Length)
    return value;
  
  key = key.Substring(i, key.Length - i);
  key = key.Trim();
  return key.AsInt;
}

//------------------------------------------------------------------------------

float IniFile::ReadFloat(String section, String key, float value)
{
  int i = this.FindKey(section, key);
  if (i == this.length)
    return value;
  
  key = this.lines[i];
  i = key.IndexOf("=") + 1;
  
  if (i == key.Length)
    return value;
  
  key = key.Substring(i, key.Length - i);
  key = key.Trim();
  return key.AsFloat;
}

//------------------------------------------------------------------------------

bool IniFile::ReadBool(String section, String key, bool value)
{
  int i = this.FindKey(section, key);
  if (i == this.length)
    return value;
  
  key = this.lines[i];
  i = key.IndexOf("=") + 1;
  
  if (i == key.Length)
    return value;
  
  key = key.Substring(i, key.Length - i);
  key = key.Trim();
  key = key.LowerCase();
  return ((key == "1") || (key == "true") || (key == "on") || (key == "yes"));
}

//------------------------------------------------------------------------------

bool IniFile::Write(String section, String key, String value)
{
  int i = this.FindKey(section, key);
  if (i == this.length)
  {
    i = this.FindLastKey(section) + 1;
    if (!this.InsertLine(i))
      return false;
  }
  this.lines[i] = String.Format("%s=%s", key, value);
  return true;
}

//------------------------------------------------------------------------------

bool IniFile::WriteInt(String section, String key, int value)
{
  int i = this.FindKey(section, key);
  if (i == this.length)
  {
    i = this.FindLastKey(section) + 1;
    if (!this.InsertLine(i))
      return false;
  }
  this.lines[i] = String.Format("%s=%d", key, value);
  return true;
}

//------------------------------------------------------------------------------

bool IniFile::WriteFloat(String section, String key, float value)
{
  int i = this.FindKey(section, key);
  if (i == this.length)
  {
    i = this.FindLastKey(section) + 1;
    if (!this.InsertLine(i))
      return false;
  }
  this.lines[i] = String.Format("%s=%f", key, value);
  return true;
}

//------------------------------------------------------------------------------

bool IniFile::WriteBool(String section, String key, bool value)
{
  int i = this.FindKey(section, key);
  if (i == this.length)
  {
    i = this.FindLastKey(section) + 1;
    if (!this.InsertLine(i))
      return false;
  }
  this.lines[i] = String.Format("%s=%d", key, value);
  return true;
}

//..............................................................................